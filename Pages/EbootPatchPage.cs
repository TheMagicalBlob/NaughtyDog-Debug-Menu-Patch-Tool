using System;
using System.IO;
using System.Drawing;
using System.Windows.Forms;
using Dobby.Resources;
using static Dobby.Common;
using System.Collections.Generic;


namespace Dobby {
    public partial class EbootPatchPage : Form {

        /// <summary>
        /// Initialize a new instance of the EbootPatchPage Form.
        /// </summary>
        public EbootPatchPage()
        {
            InitializeComponent();
            InitializeAdditionalEventHandlers(this); 
        }

        
        
        //=================================\\
        //--|   Variable Declarations   |--\\
        //=================================\\
        #region [Variable Declarations]

        private static DebugJumpAddress DebugAddressForSelectedGame;

        private static readonly string[] ResultStrings = new []
        {
            "Debug Menus Disabled",
            "Debug Menus Enabled",
            "Restored Menu Applied",
            "Custom Menu Applied",
        };
        #endregion



        
        

        //=============================================\\
        //--|   Background Function Delcarations   |---\\
        //=============================================\\
        #region [Background Function Delcarations]

        /// <summary>
        /// Search For An Unsigned Executable To Apply Patches To. <br/>
        /// Loads The File Path, Creats A New Stream, Then Runs GetGameID() To Determine The Selected Executable's Source.<br/>
        /// Then Assigns The RestoredDebugBtn's Button Text
        /// </summary>
        /// <param name="filePath"> The fuck you think it is> </param>
        private void LoadGameExecutable(string filePath)
        {
            try { 
                fileStream?.Dispose();
                Dev?.Print($"Initializing fileStream with \"{filePath}\".");
                fileStream = new FileStream(filePath, FileMode.Open, FileAccess.ReadWrite);
            }
            catch(IOException dang)
            {
                Dev?.PrintError(dang);
                UpdateLabel("Access Denied, File In Use Elsewhere", true);
                return;
            }


            GameInfoLabel.Text = ActiveGameID = GetGameID(fileStream);
                
            DebugAddressForSelectedGame = GetDebugAddress(Game);


            // Determine the available patch type based on the current game, and update the restored/custom debug button to reflect it
            switch(Game)
            {
                //#
                //## Games I've Made Customizations For
                //#
                case GameID.T2107:
                case GameID.T2108:
                case GameID.T2109:
                    RestoredDebugBtn.Enabled = true;
                    RestoredDebugBtn.Font = new Font("Cambria", 9.25F, FontStyle.Bold);
                    RestoredDebugBtn.Text = "Enable Debug Mode - Custom";
                    break;
                //#
                //## Games I've Made Restorations For
                //#
                case GameID.T1R110:
                case GameID.T1R111:
                case GameID.UC1100:
                case GameID.UC1102:
                case GameID.UC2100:
                case GameID.UC2102:
                case GameID.UC3100:
                case GameID.UC3102:
                case GameID.UC4117:
                case GameID.UC4133MP:
                    RestoredDebugBtn.Font = new Font("Cambria", 9.25F, FontStyle.Bold);
                    RestoredDebugBtn.Enabled = true;
                    RestoredDebugBtn.Text = "Enable Debug Mode - Restored";
                    break;

                //#
                //## Games I've Only Made Debug Mode Toggles For
                //#
                case GameID.T1R100:
                case GameID.T1R109:
                case GameID.T2100:
                case GameID.T2101:
                case GameID.T2102:
                case GameID.T2105:
                case GameID.UC4100:
                case GameID.UC4101:
                case GameID.UC4102:
                case GameID.UC4103:
                case GameID.UC4104:
                case GameID.UC4105:
                case GameID.UC4106:
                case GameID.UC4108:
                case GameID.UC4110:
                case GameID.UC4111:
                case GameID.UC4112:
                case GameID.UC4113:
                case GameID.UC4115:
                case GameID.UC4116:
                case GameID.UC4118:
                case GameID.UC4119:
                case GameID.UC4120:
                case GameID.UC4120MP:
                case GameID.UC4121:
                case GameID.UC4121MP:
                case GameID.UC4122_23:
                case GameID.UC4122MP:
                case GameID.UC4123MP:
                case GameID.UC4124_25:
                case GameID.UC4124MP:
                case GameID.UC4125MP:
                case GameID.UC4127_133:
                case GameID.UC4127_28MP:
                case GameID.UC4129MP:
                case GameID.UC4130MP:
                case GameID.UC4131MP:
                case GameID.UC4132MP:
                case GameID.TLL100MP:
                case GameID.TLL100:
                case GameID.TLL10X:
                    RestoredDebugBtn.Font = new Font("Cambria", 9.25F, FontStyle.Bold | FontStyle.Strikeout);
                    RestoredDebugBtn.Enabled = false;
                    RestoredDebugBtn.Text = "Enable Debug Mode - Unavailable";
                    break;

                //#
                //## Unknown games
                //#
                default:
                    Dev?.Print($"Unknown Game Selected (GetGameID()) Game: {Game}");
                    RestoredDebugBtn.Enabled = false;
                    RestoredDebugBtn.Font = new Font("Cambria", 9.25F, FontStyle.Strikeout);
                    RestoredDebugBtn.Text = "Enable Debug Mode - Unavailable";
                    break;
            }
        }


        /// <returns>
        /// The .elf Address For Enabling The Debug Mode By Patching In 0xEB
        /// </returns>
        private DebugJumpAddress GetDebugAddress(GameID GameID)
        {
            switch(GameID) {
                case GameID.UC1100:       return DebugJumpAddress.UC1100Debug;
                case GameID.UC1102:       return DebugJumpAddress.UC1102Debug;
                case GameID.UC2100:       return DebugJumpAddress.UC2100Debug;
                case GameID.UC2102:       return DebugJumpAddress.UC2102Debug;
                case GameID.UC3100:       return DebugJumpAddress.UC3100Debug;
                case GameID.UC3102:       return DebugJumpAddress.UC3102Debug;
                case GameID.UC4100:       return DebugJumpAddress.UC4100Debug;
                case GameID.UC4101:       return DebugJumpAddress.UC4101_106Debug;
                case GameID.UC4102:       return DebugJumpAddress.UC4101_106Debug;
                case GameID.UC4103:       return DebugJumpAddress.UC4101_106Debug;
                case GameID.UC4104:       return DebugJumpAddress.UC4101_106Debug;
                case GameID.UC4105:       return DebugJumpAddress.UC4101_106Debug;
                case GameID.UC4106:       return DebugJumpAddress.UC4101_106Debug;
                case GameID.UC4108:       return DebugJumpAddress.UC4108_111Debug;
                case GameID.UC4110:       return DebugJumpAddress.UC4108_111Debug;
                case GameID.UC4111:       return DebugJumpAddress.UC4108_111Debug;
                case GameID.UC4112:       return DebugJumpAddress.UC4112_113Debug;
                case GameID.UC4113:       return DebugJumpAddress.UC4112_113Debug;
                case GameID.UC4115:       return DebugJumpAddress.UC4115Debug;
                case GameID.UC4116:       return DebugJumpAddress.UC4116Debug;
                case GameID.UC4117:       return DebugJumpAddress.UC4117Debug;
                case GameID.UC4118:       return DebugJumpAddress.UC4118_119Debug;
                case GameID.UC4119:       return DebugJumpAddress.UC4118_119Debug;
                case GameID.UC4120MP:     return DebugJumpAddress.UC4120MPDebug;
                case GameID.UC4120:       return DebugJumpAddress.UC4120SPDebug;
                case GameID.UC4121MP:     return DebugJumpAddress.UC4121MPDebug;
                case GameID.UC4121:       return DebugJumpAddress.UC4121SPDebug;
                case GameID.UC4122MP:     return DebugJumpAddress.UC4122_125MPDebug;
                case GameID.UC4122_23:    return DebugJumpAddress.UC4122_125SPDebug;
                case GameID.UC4123MP:     return DebugJumpAddress.UC4122_125MPDebug;
                case GameID.UC4124MP:     return DebugJumpAddress.UC4122_125MPDebug;
                case GameID.UC4124_25:    return DebugJumpAddress.UC4122_125SPDebug;
                case GameID.UC4125MP:     return DebugJumpAddress.UC4122_125MPDebug;
                case GameID.UC4127_28MP:  return DebugJumpAddress.UC4127_132MPDebug;
                case GameID.UC4127_133:   return DebugJumpAddress.UC4127_133SPDebug;
                case GameID.UC4129MP:     return DebugJumpAddress.UC4127_132MPDebug;
                case GameID.UC4130MP:     return DebugJumpAddress.UC4127_132MPDebug;
                case GameID.UC4131MP:     return DebugJumpAddress.UC4127_132MPDebug;
                case GameID.UC4132MP:     return DebugJumpAddress.UC4127_132MPDebug;
                case GameID.UC4133MP:     return DebugJumpAddress.UC4133MPDebug;
                case GameID.UC4MPBETA100: return DebugJumpAddress.UC4MPBETA100Debug;
                case GameID.UC4MPBETA109: return DebugJumpAddress.UC4MPBETA109Debug;
                case GameID.TLL100MP:     return DebugJumpAddress.TLL100MPDebug;
                case GameID.TLL100:       return DebugJumpAddress.TLL100Debug;
                case GameID.TLL10X:       return DebugJumpAddress.TLL10XDebug;
                case GameID.T1R100:       return DebugJumpAddress.T1R100Debug;
                case GameID.T1R109:       return DebugJumpAddress.T1R109Debug;
                case GameID.T1R110:       return DebugJumpAddress.T1R110Debug;
                case GameID.T1R111:       return DebugJumpAddress.T1R111Debug;
                case GameID.T2100:        return DebugJumpAddress.T2100Debug;
                case GameID.T2101:        return DebugJumpAddress.T2101Debug;
                case GameID.T2102:        return DebugJumpAddress.T2102Debug;
                case GameID.T2105:        return DebugJumpAddress.T2105Debug;
                case GameID.T2107:        return DebugJumpAddress.T2107Debug;
                case GameID.T2108:        return DebugJumpAddress.T2108Debug;
                case GameID.T2109:        return DebugJumpAddress.T2109Debug;


                case GameID.Empty:
                    return DebugJumpAddress.Empty;

                default:
                    Dev?.Print($"ERROR: Invalid Game ID during EbootPatchPage.GetDebugAddress");
                    return DebugJumpAddress.Empty;
            }
        }



        /// <summary>
        /// Patch the current executable with the chosen patch type. either enables the debug mode, disables it for some reason, patches in a custom menu, or attempts to restore it authentically.
        /// </summary>
        /// <param name="patchType">
        /// The type of patch being applied<br/><br/>
        /// | 0: Disable<br/>
        /// | 1: Enable<br/>
        /// | 2: Restored<br/>
        /// | 3: Custom
        /// </param>
        public void ApplyDebugPatches(int patchType)
        {
            if(Game == GameID.Empty) {
                UpdateLabel("Please Select A Game's Executable First", true);
                return;
            }


            // Apply (or revert) the basic debug menu patch
            WriteVar(fileStream, (int)DebugAddressForSelectedGame, (byte)(patchType == 0 ? (DebugAddressForSelectedGame == DebugJumpAddress.T1R100Debug ? 0x74 : 0x75) : 0xEB)); // Also checks whether or not the game's T1R, as that one requires a different patch (only one without a JNZ there lol)



            // Return if only a simple debug mode toggle was chosen
            if(patchType < 2) {
                UpdateLabel($"{ActiveGameID} {ResultStrings[patchType]}");
                return;
            }

            bool status; 
            switch(Game) {
                default:
                    MessageBox.Show("Couldn't Determine The Game This Executable Belongs To, Send It To Blob To Have It's Title ID Supported\n" + Game);
                    break;
                case GameID.T1R100:
                case GameID.T1R109:
                case GameID.T1R110:
                case GameID.T1R111:
                    T1R11X_RestoredMenu();
                    break;
                case GameID.T2100:
                case GameID.T2101:
                case GameID.T2102:
                case GameID.T2105:
                case GameID.T2107:
                    status = T2107_CustomMenu();
                    break;
                case GameID.T2108:
                case GameID.T2109:
                    T2109_CustomMenu();
                    break;
                case GameID.UC1100: // Uncharted 1 1.00 Restored Debug Ver. 2.6.1
                    UC1100_RestoredMenu();
                    break;
                case GameID.UC1102: // Uncharted 1 1.02 Restored Debug Ver. 2.7
                    UC1102_RestoredMenu();
                    break;
                case GameID.UC2100: // Uncharted 2 1.00 Restored Debug Ver. 1.0
                    UC2100_RestoredMenu();
                    break;
                case GameID.UC2102: // Uncharted 2 1.02 Restored Debug Ver. 1.0
                  //UC2102_RestoredMenu();
                    break;
                case GameID.UC3100:
                    UC3100_RestoredMenu();
                    break;
                case GameID.UC3102:
                  //UC3100_RestoredMenu();
                    break;
                case GameID.UC4100:
                  //UC4SP100_CustomMenu();
                    break;
                case GameID.UC4127_133:
                  //UC4SP127_CustomMenu();
                    break;
                case GameID.UC4133MP:
                    UC4MP133_RestoredMenu(fileStream);
                    break;
                case GameID.TLL100MP:
                  //TLLMP100_RestoredMenu();
                    break;
                case GameID.TLL100:
                  //TLLSP100_CustomMenu();
                    break;
                case GameID.TLL10X:
                  //TLLMP100_RestoredMenu();
                    break;
            }


            UpdateLabel($"{ActiveGameID} {ResultStrings[patchType]}", false);
        }




        private void UC1100_RestoredMenu()
        {
            var WhiteJumpsOneByte = new []
            {
                0xE20E3,  // BP UCC...
                0xE373A,  // Collision...
                0xE379B,  // Gameplay...
                0xE37FC,  // Game Objects...
                0xE385E,  // Levels...
                0xE395E,  // Npc...
                0xE39BF,  // Nav-Mesh...
                0xE3A58,  // Interactive Background...
                0xE3A65,  // Interactive Background... (Pt.2)
                0xE3A9E,  // Actors...
                0xE3AB0,  // Animation...
                0xE3AC2,  // Water...
                0xE3B23,  // Fx...
                0xE3B84,  // Camera... (Literally Just The String, Unfortunately :/)
                0xE3E18,  // Physics...
                0xE52F2,  // Particles...
                0x39F37C, // Some PlayGo... Options
                0x9FF43,  // CutScenes Menu Nest
                0xD41B4   // CutScenes...
            };
            var WhiteJumps = new []
            {
                0x2A7E08, // Quick Menu Character Options
                0xE2125,  // Rendering, BP Rendering, And Rendering PS3
                0xE2EA1,  // Spawn Character...
                0xE35BA,  // Spawn Vehicle...
                0x271F0D, // Player...
                0x272161, // Player... (Pt.2)
                0x1027BD, // Gameplay... (Pt.2)
                0x104B47, // Gameplay... (Pt.3)
                0xE3BBE,  // Clock...
                0xE3E7C,  // Menu...
                0xE4033,  // Audio...
                0xE536E   // Language...
            };
            var FunctionNops = new []
            {
                0x4462F6, // Particles Push
                0x447399, // Particles Pop
                0xD3BC9,  // CutScenes Push
                0xD3DCE,  // CutScenes Pop
                0xD4548   // Skip Crashing CutScenes... Function
            };

            WriteVar(fileStream, 0x102050, 0xC3);                                        // Keep Debug Mode Enabled (It Gets Disabled On Boot, It's Actually On By Default).

            WriteVar(fileStream, 0x2D6AD3, new byte[] { 0xE9, 0x27, 0x00, 0x00, 0x00 }); // Skip Crashing Shader Variables Code
            WriteVar(fileStream, 0x2D6B26, new byte[] { 0xEB, 0x05 });                   // Skip Some Code That Causes The Material Debug... Menu To Crash When Selected
            WriteVar(fileStream, 0x2D6C87, new byte[] { 0xE9, 0x76 });                   // Skip Crashing Shader Variables Submenu (Crashes The Game Mid-Boot)
            WriteVar(fileStream, new [] { 0x2D6A50, 0x2D6A70 }, 0xEB);                // Fix The Material Debug... Options

            //WriteVar(fileStream, 0x77B2E0, new byte[] { 0x5A, 0x7D, 0x0C, 0x00 });     // Add Valid Build Number. This Enables The "Build: " & "Built: " Debug Text As Well

            WriteVar(fileStream, 0x354650, new byte[] { 0xB0, 0x01 });                   // Load HYBRID Text
            WriteVar(fileStream, 0x354681, 0x00);                                        // Change HYBRID To DEBUG

            WriteVar(fileStream, 0x2C7230, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Create New Level Render Settings..." From Crashing The Game When "Default Render Settings..." Is Opened
            WriteVar(fileStream, 0x2C7220, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Load Existing Render Settings..." From Crashing The Game When "Default Render Settings..." Is Opened
            WriteVar(fileStream, 0x2C71A1, 0xEB);                                        // Stop "Save Current Render Settings..." From Crashing When Selected



            foreach (var Address in WhiteJumpsOneByte)
                WriteVar(fileStream, Address, 0x00);

            foreach (var Address in WhiteJumps)
                WriteVar(fileStream, Address, new byte[] { 0x00, 0x00 });

            foreach (var Address in FunctionNops)
                WriteVar(fileStream, Address, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });


            UpdateLabel("Uncharted 1 Restored Debug Patch Applied");
        }


        private void UC1102_RestoredMenu()
        {
            var WhiteJumpsOneByte = new []
            {
                0xE21D3,    // BP UCC...
                0xE382A,    // Collision...
                0xE388B,    // Gameplay...
                0xE38EC,    // Game Objects...
                0xE394E,    // Levels...
                0xE3A4E,    // Npc...
                0xE3AAF,    // Nav-Mesh...
                0xE3B48,    // Interactive Background...
                0xE3B8E,    // Actors...
                0xE3BA0,    // Animation...
                0xE3BB2,    // Water...
                0xE3C13,    // Fx...
                0xE3C74,    // Camera... (Literally Just The String, Unfortunately :/)
                0xE3F08,    // Physics...
                0xE53E2,    // Particles...
                0x9FF63,    // CutScenes Menu Nest
                0xD42A4     // CutScenes...
            };
            var WhiteJumps = new []
            {
                0x2A83F8, // Quick Menu Character Options
                0xE2215,  // Rendering, BP Rendering, And Rendering PS3
                0xE2F91,  // Spawn Character...
                0xE36AA,  // Spawn Vehicle...
                0x27247D, // Player...
                0x2726D1, // Player... (Second Chunk)
                0x1028ED, // Gameplay... (Pt.2)
                0x104C77, // Gameplay... (Pt.3)
                0xE3CAE,  // Clock...
                0xE3F6C,  // Menu...
                0xE4123,  // Audio...
                0xE545E,  // Language...
                0x498DC8  // Some PlayGo... Options
            };
            var FunctionNops = new []
            {
                0x31B8F7,   // State Objects Push
                0x31BA73,   // State Objects Pop
                0x55F8E7,   // Particles Push
                0xD3CB9,    // CutScenes Push
                0xD3EBE,    // CutScenes Pop
                0xD4638     // Skip Crashing CutScenes Function
            };

            // Keep Debug Mode Enabled (It Gets Disabled On Boot, It's Actually On By Default). Also Puts The State Objects Menu In The Main Dev Menu, Which Is Where It Shows When The Gameplay Menu Isn't Loaded. It Looks Cooler, Heh.
            WriteVar(fileStream, new [] { 0x102187, 0x31B967 }, 0xEB);


            //WriteVar(fileStream, 0x772B80, new byte[] { 0x46, 0x7F, 0x0C, 0x00 });     // Add Valid Build Number. This Enables The "Build: " & "Built: " Debug Text As Well

            WriteVar(fileStream, 0x44AE30, new byte[] { 0xB0, 0x01 });                   // Load HYBRID Debug Text
            //WriteByte (0x44AE41, 0x00);                                    // Change HYBRID To DEBUG


            //Skip Some Code In Two Spots In The State Objects Menu To Stop Tasks From Crashing The Game Mid-Load
            WriteVar(fileStream, 0x30FF09, new byte[] { 0xEB, 0x2C });
            WriteVar(fileStream, 0x30FF3C, new byte[] { 0xEB, 0x17 });


            WriteVar(fileStream, 0x2D70C3, new byte[] { 0xE9, 0x27, 0x00, 0x00, 0x00 }); // Skip Crashing Shader Variables Code
            WriteVar(fileStream, 0x2D7116, new byte[] { 0xEB, 0x05 });                   // Skip Some Code That Causes The Material Debug... Menu To Crash When Selected
            WriteVar(fileStream, 0x2D7277, new byte[] { 0xE9, 0x76 });                   // Skip Crashing Shader Variables Submenu
            WriteVar(fileStream, new [] { 0x2D7060, 0x2D7040 }, 0xEB);               // Fix The Material Debug... Options

            WriteVar(fileStream, 0x2C7810, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Create New Level Render Settings..." From Crashing The Game When "Default Render Settings..." Is Opened
            WriteVar(fileStream, 0x2C7820, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Load Existing Render Settings..." From Crashing The Game When "Default Render Settings..." Is Opened
            WriteVar(fileStream, 0x2C7791, 0xEB);                                        // Stop "Save Current Render Settings..." From Crashing When Selected

            WriteVar(fileStream, 0x561BB0, new byte[] { 0xE9, 0xB5, 0x00, 0x00, 0x00 }); // Particles Pop

            foreach (int Address in WhiteJumpsOneByte)
                WriteVar(fileStream, Address, 0x00);

            foreach (int Address in WhiteJumps)
                WriteVar(fileStream, Address, new byte[] { 0x00, 0x00 });

            foreach (int Address in FunctionNops)
                WriteVar(fileStream, Address, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });


            UpdateLabel("Uncharted 1 Restored Debug Patch Applied");
        }

        
        private void UC2100_RestoredMenu()
        {
            var WhiteJumpsOneByte = new []
            {
                0x6C9C,   // Actor Viewer... (Quick Menu)
                0x1C46C7, // BP UCC...
                0x1C4CC4, // Net...
                0x1C4D52, // Collision (Havok)...
                0x1C4DD3, // Gameplay... (Root Entry)
                0x1C4E33, // Game Objects...
                0x1C525E, // Npc... & Navigating Character...
                0x1C5339, // Nav-Mesh...
                0x1C53BA, // Profile...
                0x1C5449, // Actors... & Process...
                0x1C547B, // Animation...
                0x1C54AD, // Camera... (String Only :/)
                0x1C76E4, // Particles...
                0x1C7A51, // Scripts...
                0x5262A6, // Some Miscellaneous PLayGo... Options
                0x436CED, // Complete Tasks...
                0x14EE64, // CutScenes... Jump 1
                0x14EE6D, // CutScenes... Jump 2
                0x1B4135  // CutScenes...
            };
            var WhiteJumps = new []
            {
                0x1C4708, // Rendering... & BP Rendering... & System...
                0x545C9C, // Rendering... -> Optimization... (Load Rest Of Contents)
                0x37A0DB, // Player Menu (Chunk 1)
                0x37A2EC, // Player Menu (Chunk 2)
                0x23CDBB, // Gameplay... (Chunk 1)
                0x2401F1, // Gameplay... (Chunk 2)
                0x1C4EB5, // Levels...
                0x1C54E6, // Clock...
                0x1C593A, // Menu...
                0x1C5CB2, // Audio...
                0x1C7746  // Language...
            };
            var FunctionNops = new []
            {
                0x6CB7,   // Actor Viewer Push
                0x6D5E,   // Actor Viewer Pop
                0x1C4723, // System Push
                0x1C4C60, // System Pop
                0x37A0F6, // Player Menu Chunk 1 Push
                0x37A2A6, // Player Menu Chunk 1 Pop
                0x37A317, // Player Menu Chunk 2 Push
                0x37B699, // Player Menu Chunk 2 Pop
                0x1C4CDC, // Net Menu Push
                0x1C4D38, // Net Menu Pop
                0x2C514C, // Net -> Boosters Push
                0x2C5327, // Net -> Boosters Pop
                0x1C4D6A, // Collision (Havok) Push
                0x1C4DC6, // Collision (Havok) Pop
                0x23CDD6, // Gameplay Push 1
                0x23FF08, // Gameplay Pop  1
                0x24020C, // Gameplay Push 2
                0x2404BD, // Gameplay Pop  2
                0x428D3A, // Gameplay -> State Scripts Push
                0x42980A, // Gameplay -> State Scripts Pop
                0x1C4E4B, // Game Objects Push
                0x1C4EA7, // Game Objects Pop
                0x1C4ED0, // Levels Push
                0x1C5250, // Levels Pop
                0x1C5279, // Npc Push
                0x1C532C, // Npc Pop
                0x1C5351, // Nav-Mesh Push
                0x1C53AD, // Nav-Mesh Pop
                0x1C5461, // Actors & Process Push
                0x1C546E, // Actors & Process Pop
                0x1C5493, // Animation Push
                0x1C54A0, // Animation Pop
                0x1C5955, // Menu Push
                0x1C5CA4, // Menu Pop
                0x1C76FC, // Particles Outer Push
                0x5D3C66, // Particles Inner Push
                0x5D4D09, // Particles Inner Pop
                0x1C7738, // Particles Outer Pop
                0x1C7761, // Language Push
                0x1C7A44, // Language Pop
                0x436D08, // Complete Tasks Outer Push
                0x436D71, // Complete Tasks Outer Pop
                0x437173, // Complete Tasks Inner Push
                0x4371A4, // Complete Tasks Inner Pop
                0x1B41BD, // CutScenes Outer Push
                0x1B41E5, // CutScenes Outer Pop
                0x1CEAA5, // CutScenes Inner Push 1
                0x1CEB0C, // CutScenes Inner Pop  1
                0x1B3B89, // CutScenes Inner Push 2
                0x1B3E7B  // CutScenes Inner Pop  2
            };
            var Returns = new [] {
                0x429840, // State Scripts Func
                0x1C2650  // Selects Objects 
            };

            // Miscellaneous Patches \\
            WriteVar(fileStream, 0x1EB297, 0xEB);  // Skip Debug Disable

            // Mass Apply Duplicate Patches \\
            foreach (int address in WhiteJumps)
                WriteVar(fileStream, address, new byte[] { 0x00, 0x00, 0x00, 0x00 });

            foreach (int address in WhiteJumpsOneByte)
                WriteVar(fileStream, address, 0x00);

            foreach (int address in FunctionNops)
                WriteVar(fileStream, address, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });

            foreach (int address in Returns)
                WriteVar(fileStream, address, 0xC3);
        }

        private void UC2102_RestoredMenu() {

        }

        private void UC3100_RestoredMenu()
        {
            var FunctionNops = new []
            {
                0x151743, // System Push
                0x15183D, // System Pop
                0x151862, // Spawn Character Push
                0x15186F, // Spawn Character Pop
                0x151898, // Spawn Vehicle Push
                0x15191F, // Spawn Vehicle Pop
                0x15199B, // Collision Push
                0x1519F7, // Collision Pop
                0x170126, // Gameplay Push 1
                0x172B13, // Gameplay Pop  1
                0x172DF1, // Gameplay Push 2
                0x1730F7, // Gameplay Pop  2
                0x8699DA, // State Scripts Push
                0x86A612, // State Scripts Pop
                0x151A7C, // Game Objects Push
                0x151AD0, // Game Objects Pop
                0x151AFD, // Levels Push
                0x15205F, // Levels Pop
                0x152088, // Navigating Character Push
                0x15212B, // Navigating Character Pop
                0x152150, // Nav-Mesh Push
                0x1521A4, // Nav-Mesh Pop
                0x152226, // Interactive Background Push
                0x152267, // Interactive Background Pop
                0x15228C, // Actors / Process Push
                0x152299, // Actors / Process Pop
                0x1522BE, // Animation Push
                0x1522CB, // Animation Pop
                0x1522F0, // Water Push
                0x15234C, // Water Pop
                0x152371, // Fx Push
                0x1523CD, // Fx Pop
                0x16454D, // Camera Outer Push
                0x164557, // Camera Outer Pop
                0x12FE70, // Camera Middle Push
                0x12FE8A, // Camera Middle Pop
                0x1301F8, // Camera Inner Push
                0x131DAB, // Camera Inner Pop
                0x152921, // Menu Push
                0x152DDD, // Menu Pop
                0x154951, // Language / Recorder Push
                0x154C5C, // Language / Recorder Pop
              //0x833CE5, // Scripts Push
              //0x833FE6, // Scripts Pop
            };
            var WhiteJumpsSmol = new []
            {
                0x1516E7, // BP UCC...
                0x15184A, // Spawn Character...
                0x15187D, // Spawn Vehicle...
                0x151983, // Collision (Havok)...
                0x151A04, // Gameplay...
                0x151A64, // Game Objects...
                0x151E7E, // Load Misc. Levels... Option
                0x15206D, // Navigating Character...
                0x152138, // Nav-Mesh
                0x15220E, // Interactive Background...
                0x152274, // Process...
                0x1522A6, // Animation...
                0x1522D8, // Water...
                0x152359, // Fx...
                0x16452F, // Camera (Outer)
                0x1523DA, // Camera (inner)
                0x152412, // Clock...
                0x152902  // Menu...
            };
            var WhiteJumpsLorge = new []
            {
                0x151728, // System...
                0x17010B, // Gameplay Chunk 1
                0x172DD6, // Gameplay Chunk 2
                0x151ADE, // Levels...
                0x152412, // Clock...
                0x152902, // Menu...
                0x152DEB, // Audio...
                0x154936, // Language... / Recorder...
              //0x833CCA  // Scripts...
            };
            var Returns = new []
            {
                0x3F89E0, // Skip Schema Spawn Menu Update
                0x3F93D0, // Skip DCSpawn Menu Update
                0x86B170  // Skip IGC Menu Update
            };

            WriteVar(fileStream, 0x6cff50, new byte[] { 0x80, 0x34, 0x25, 0x6b, 0x95, 0x7f, 0x01, 0x01 }); // Change Debug Rendering Toggle To Novis One Until I Get The Rendering Menu Loaded
            WriteVar(fileStream, 0x1517A0, new byte[] { 0xe8, 0xeb, 0x4a, 0x3a, 0x00, 0x49, 0x89, 0xc7 }); // Load Mini-Rendering Menu For Now
            WriteVar(fileStream, 0x15355f, new byte[] { 0xe9, 0x66, 0x13, 0x00, 0x00 });                   // Skip Four Audio... Submenus


            foreach (int addr in FunctionNops)
                WriteVar(fileStream, addr, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });
            foreach (int addr in WhiteJumpsLorge)
                WriteVar(fileStream, addr, new byte[] { 0x00, 0x00 });
            foreach (int addr in WhiteJumpsSmol)
                WriteVar(fileStream, addr, 0x00);
            foreach (int addr in Returns)
                WriteVar(fileStream, addr, 0xC3);
        }


        private void UC3102_RestoredMenu() {
        }

        private void UC4100_Patches() {
        }

        private void UC4133_Patches() {
        }


        private void UC4MP133_RestoredMenu(FileStream fileStream)
        {
            var WhiteJumps = new []
            {
                0x2409ED,  // Relaunch...
                0x18725CA, // Switch On/Off Neo Resolution Mode...
                0x18737BF, // Optimization...
                0x18762C6, // Render Pause
                0x18768C7, // Rendering...            (Chunk 1)
                0x187D6E0, // Rendering...            (Chunk 2)
                0x3DA85A,  // IGCs...
                0x1B4ABB8, // Post-Processing...      (Chunk 1)
                0x1B52536, // Post-Processing...      (Chunk 2)
                0x1894772, // Lighting...             (Chunk 1)
                0x189F096, // Lighting...             (Chunk 2)
                0x187F975, // Rendering...            (Chunk 3)
                0x404833,  // Spawn Character...
                0x405065,  // Spawn Vehicle...
                0x407016,  // Collision (Havok)...
                //3D7D50,  // Gameplay Menu           [Chunk 1 | SKIPPED FOR MEMORY REASONS]
                0x3E87C8,  // Gameplay Menu           (Chunk 2)
                0x40727F,  // Game Objects...
                0x4073D0,  // Levels...
                0x4085D9,  // A Misc. Levels... Option
                0x40912D,  // Navigation...
                0x4BD0EF,  // NavMesh...
                0x40927F,  // Interactive Background...
                0x409559,  // Actors... & Process...
                0x40C78A,  // Animation...
                0x241158,  // Camera...
                0x40FF86,  // Menu...
                //15673A5, // Audio...                [Chunk 1 | SKIPPED FOR MEMORY REASONS]
                0x156E3BA, // Audio Output...
                0x156F366, // Audio Output... Chunk 2
                0x1570B25, // Audio... Chunk 2
                0x4130D6,  // Music...
                0x413475,  // Vox...
                0x414DB0,  // Misc. Vox... Options
                0x173236A, // Scripts... (Menu Contents)
                0x41500A,  // Particles...
                0x415272,  // Level BugFix...
                0x24BE58,  // Cinematics              (Chunk 1)
                0x24CB24,  // Cinematics              (Chunk 2)
                0x24E347,  // Designer...
                0x18B01A5, // Load A Few Extra Particle Menu Options
                0x24E854,  // Tasks...                (Extras)
                0x24E92A,  // Play Test Tasks...
                0x24ED5A,  // Complete Test Tasks...
                0x1643865  // Stop SP Tasks From Crashing In Coop/MP
            };
            var FunctionNops = new []
            {
                0x18768E9, // Rendering Push 1
                0x187C132, // Rendering Pop  1
                0x187D702, // Rendering Push 2
                0x187F8D0, // Rendering Pop  2
                0x187D84D, // Rendering Menu Double Line Fix
                0x40485B,  // Spawn Character... Push
                0x405057,  // Spawn Character... Pop
                0x40508D,  // Spawn Vehicle Push
                0x405311,  // Spawn Vehicle Pop
                0x7F6659,  // Stop The Game From Booting SP If The X Button Is Pressed On The Menu

                //These Next 8 Are Only Needed For The Gameplay Menu's First Chunk Which I've Not Loaded, So These Are Commented Out
                //3D7D79,  // Gameplay Push
                //3DA63D,  // Gameplay Pop
                //3B0EB2,  // Demo Mode Push 1
                //3B10F3,  // Demo Mode Pop  1
                //3D7D9C,  // StateScripts Push
                //3DA87C,  // IGCs Push
                //3DA9BA,  // IGCs Pop
                //3E806C,  // State Scripts Pop

                0x3E87EA,  // Gameplay Part 2 Push
                0x3E9506,  // Gameplay Part 2 Pop
                0x40703E,  // Collision (Havok)... Push (Outside The Submenu, So Gotta Skip 'EM Still)
                0x40715A,  // Collision (Havok)... Pop
                0x4072A7,  // Game Objects... Push
                0x4073C2,  // Game Objects... Pop
                0x4073F8,  // Levels... Push
                0x408CF3,  // Levels... Pop
                0x241182,  // InitGuiWidgets() Push
                0x2412D3,  // Misc. Pop (Needed?)
                0x2412FE,  // GameInitInternal() Push (Needed?)
                0x241329,  // SpawnCameraMenu() Push
                0x241351,  // Skip Some Pops By The Camera Menu
                0x241356,  // /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
                0x409155,  // Navigation Push
                0x409271,  // Navigation Pop
                0x4BD11D,  // NavMesh Push
                0x4BD14F,  // NavMesh Pop
                0x4092A7,  // Interactive Background... Push
                0x40954B,  // Interactive Background... Pop
                0x409581,  // Actors... & Process... Push
                0x40C77C,  // Actors... & Process... Pop
                0x40C7B2,  // Animation... Push
                0x40FF02,  // Animation... Pop
                0x7E074F,  // Camera... Push
                0x7E73A9,  // Camera... Pop
                0x40FFB5,  // Menu... Push
                0x4115BF,  // Menu... Pop
                //15673D2, // Audio... Chunk 1 Push   [SKIPPED FOR MEMORY REASONS]
                //156E314, // Audio... Chunk 1 Pop    [SKIPPED FOR MEMORY REASONS]
                0x156E3DC, // Audio Output... Push
                0x156EEC6, // Audio Output... Pop
                0x156F388, // Audio Output... Chunk 2 Push
                0x1570A85, // Audio Output... Chunk 2 Pop
                0x1570B47, // Audio... Chunk 2 Push
                0x1570E96, // Audio... Chunk 2 Pop
                0x41310E,  // Music... Push
                0x4133C8,  // Music... Pop
                0x41349D,  // Vox... Push
                0x414F6B,  // Vox... Pop
                0x1733078, // Scripts... Push
                0x173238C, // Scripts... Pop
                0x41529A,  // Level BugFix... Push
                0x415A38,  // Level BugFix... Pop
                0x24BE82,  // Cinematics Push 1
                0x24C5DB,  // Cinematics Pop 1
                0x24CB4E,  // Cinematics Push 2
                0x24E28D,  // Cinematics Pop 2
                0x19CA02F, // Demo Mode Push 2
                0x19CA23A, // Demo Mode Pop  2
                0x1B4ABE1, // Post-Processing Chunk 1 Push
                0x1B5209A, // Post-Processing Chunk 1 Pop
                0x1B52558, // Post-Processing Chunk 2 Push
                0x1B55062, // Post-Processing Chunk 2 Pop
                0x189479B, // Lighting Chunk 1 Push
                0x189B921, // Lighting Chunk 1 Pop
                0x189F0B8, // Lighting Chunk 2 Push
                0x18A06E7, // Lighting Chunk 2 Pop
                0x187F997, // Rendering Chunk 3 Push
                0x188DB53, // Rendering Chunk 3 Pop
                0x415032,  // Particles Push 1
                0x4150BF,  // Particles Pop  1
                0x18AF7DF, // Particles Push 2
                0x18B3691, // Particles Pop  2
                0x24E371,  // Designer Push  1
                0x24E3A8,  // Designer Push  2
                0x24E444,  // Designer Pop   1
                0x24E4DF,  // Designer Pop   2
                0x24E88B,  // Extra Tasks... Options Push
                0x24EE94   // Extra Tasks... Options Pop
            };
            var Returns = new []
            {
                0x421960,  // Skip Schema Spawn Menu
                0x423590,  // Skip DC Spawn Menu
                0x9D5430,  // Skip Select Nav-Mesh
                0x39B1E0   // Designer Content Loop

                //These Last 5 Are Only Needed For The Gameplay Menu's First Chunk Which I've Not Loaded, So These Are Commented Out
                //161AC50, // Skip IGCs Menu
                //17176A0, // Skip Select Region By Name Menu
                //72D480,  // Skip Gestures Menu                    
                //16186D0, // Skip Select State Script Menu
                //16186D0  // State Scripts Menu For Memory Reasons
            };


            // Main Patches
            WriteVar(fileStream, new [] { 0x1CCEB8, 0x24E5C8 }, 0x01);                 // Enables The Debug Mode, Then The UC4 Tasks Menu
            WriteVar(fileStream, 0xA37DE1, new byte[] { 0xE9, 0x08, 0x00, 0x00, 0x00 });  // Skip PSN Sign-In Check

            // Misc Patches
            WriteVar(fileStream, 0x187B1F4, new byte[] { 0x90, 0x90, 0x90 });             // Skip Crashing Pre-Material Debug Function Call
            WriteVar(fileStream, 0x187B214, new byte[] { 0xE9, 0x07, 0x00, 0x00, 0x00 }); // Skip Material Debug Code That Breaks Some SP Tasks
            WriteVar(fileStream, 0x1B5A9C0, new byte[] { 0xE9, 0x0F, 0x00, 0x00, 0x00 }); // Stop Various Material Debug Options From Crashing After The Above Patch
            WriteVar(fileStream, 0x187B6CE, new byte[] { 0xE9, 0x27, 0x01, 0x00, 0x00 }); // Skip Shader Variables, As It Now Crashes After The Above Patch (It's Empty Anyway, No Big Deal)
            WriteVar(fileStream, 0x1876A1A, 0xC8);                                        // Lower The Amount Of Loops For The Draw Mode Options By 3 To Skip The Ones That Cause Orbis Crashes
            WriteVar(fileStream, 0x1CB63D0, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Choose Lut File..." From Crashing The Game
            WriteVar(fileStream, 0x15E8AE0, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Play Cinematic..." From Crashing The Game
            WriteVar(fileStream, 0x15E9340, new byte[] { 0xB0, 0x01, 0xC3 });             // Stop "Select Cinematic..." From Crashing The Game
            WriteVar(fileStream, 0x18B7547, 0xEB);                                        // Stop Particles Menu From Fully Initializing And Crashing Game On Boot
            WriteVar(fileStream, 0x18AF8FD, new byte[] { 0xE9, 0x0A, 0x01, 0x00, 0x00 }); // Skip Two Unfixable "Particles..." Submenus
            WriteVar(fileStream, 0x18AFC31, new byte[] { 0xE9, 0x28, 0x03, 0x00, 0x00 }); // Skip Three More Unfixable "Particles..." Submenus
            WriteVar(fileStream, 0x166BF6B, new byte[] { 0xE9, 0x5B, 0x04, 0x00, 0x00 }); // Skip Select Spawner By Name Menu
            WriteVar(fileStream, 0x18E1900, new byte[] { 0xE9, 0x89, 0xC5, 0x00, 0x00 }); // Skip Most Of "Collision (Havok)..." Starting After "Destruction..."


            // Mass Apply Duplicate Patches
            foreach (int Address in WhiteJumps)
            {
                WriteVar(fileStream, Address, new byte[] { 0x00, 0x00, 0x00, 0x00 });
            }

            foreach (int Address in FunctionNops)
            {
                WriteVar(fileStream, Address, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });
            }
            
            foreach (int Address in Returns)
            {
                WriteVar(fileStream, Address, 0xC3);
            }
        }


        private void TLL100MP_RestoredMenu() {

        }
        private void TLL100_RestoredMenu() {

        }

        private void TLL108MP_RestoredMenu() {

        }
        private void TLL108_RestoredMenu() {

        }
        private void TLL109MP_RestoredMenu() {

        }
        private void TLL109_RestoredMenu() {

        }

        private void T1R100_RestoredMenu()
        {
            WriteVar(fileStream, 0x6363C,  new byte[] { 0xE8, 0xEF, 0x24, 0x6D, 0x00 }); // Replace Call To Mini-Rendering Menu With One To The Full Rendering Menu
            WriteVar(fileStream, 0x94DD35, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 }); // Skip A Function In The Material Debug Menu That Causes The Game To Crash While Booting
            WriteVar(fileStream, 0x38282C, new byte[] { 0x00, 0x00 });                   // Load Net... Contents
        }


        private bool T1R11X_RestoredMenu()
        {
            try {
                var FunctionsToSkip = new []
                {
                    0x76E62C, // State Scripts Push
                    0x76F0CF, // State Scripts Pop
                    0x28102A, // Skip Part Of Gestures Menu Init
                    0x7AAC30, // Skip Outer UpdateSelectSpawnerByNameMenu Call
                    0x7AB035, // Skip Inner UpdateSelectSpawnerByNameMenu Call
                    0x79E60,  // Skip Outer UpdateDCSpawnMenu Call
                    0x7ABD5,  // Skip Inner UpdateDCSpawnMenu Call
                    0xA40E2B, // Skip Splashers... Content Loop Outer
                    0x8492E0, // Skip Splashers... Content Loop Inner
                    0xA46208, // Lens Flare Push
                    0xA46542, // Lens Flare Pop
                    0x75408A, // Camera Shake Push
                    0x7541E4  // Camera Shake Pop
                };
                var Returns = new []
                {
                    0x76F0F0, // Skip Select State Scripts Menu Population
                    0x770D00, // Skip Select IGC... Menu Population
                    0x6FAD80, // Skip Spawn Actor... Content Loop
                    0x7A050   // Skip Schema Spawn... Content Loop
                };


                // Write The 5 Chunks With The Majority Of Function Calls \\
                WriteVar(fileStream, 0x1457571, Resource.T1R_11X_Restored_Chunk2);
                WriteVar(fileStream, 0x1457D2E, Resource.T1R_11X_Restored_Chunk2);
                WriteVar(fileStream, 0x7AA10, Resource.T1R_11X_Restored_Chunk3);
                WriteVar(fileStream, 0x8492F0, Resource.T1R_11X_Restored_Chunk4);
                WriteVar(fileStream, 0x7AAC7D, Resource.T1R_11X_Restored_Chunk5);

                // Root Menu Function Calls \\
                WriteVar(fileStream, 0x71F6C, new byte[] { 0xE8, 0x4F, 0x6B, 0x84, 0x00 }); // Call Large Rendering Menu Instead Of Tiny One (Yeah, That's All It Takes...)
                WriteVar(fileStream, 0x8BA76A, new byte[] { 0xe8, 0x41, 0xd9, 0xb9, 0x00 }); // Call Additional Rendering Related Functions Inside Rendering Menu)
                WriteVar(fileStream, 0x71FA8, new byte[] { 0x49, 0x8b, 0xfe, 0xe8, 0xc0, 0x8c, 0x73, 0x00, 0xeb, 0x0e }); // Call System, Spawn Character, And Custom Player Menu
                WriteVar(fileStream, 0x72012, new byte[] { 0xe8, 0xd4, 0x8a, 0x00, 0x00, 0xeb, 0x03 }); // Call Custom Collision (Havok) Menu
                WriteVar(fileStream, 0x72044, new byte[] { 0xe8, 0xa6, 0x5a, 0x3e, 0x01 }); // Call Custom Gameplay Menu
                WriteVar(fileStream, 0x721A1, new byte[] { 0xe8, 0x77, 0x8d, 0x73, 0x00 }); // Call Npc, Navigating Character, Simple Npc, Nav-Mesh
                WriteVar(fileStream, 0x722CF, new byte[] { 0x48, 0x8B, 0x5D, 0xB8, 0x48, 0x89, 0xDF, 0xE8, 0x35, 0x87, 0x00, 0x00, 0xEB, 0x1A }); // Call Interactive Background, Actors, Process, Animation, Water, Fx, And Camera
                WriteVar(fileStream, 0x7290D, new byte[] { 0xe8, 0x12, 0x57, 0x3e, 0x01 }); // Call Custom Menu & Audio Menus

                // Misc Functionality Patches \\
                WriteVar(fileStream, 0x61A4, 0xEB);                                                      // Enable Debug Menu
                WriteVar(fileStream, 0xA34FCB, 0x87);                                                    // Change Useless Debug Rendering Toggle To A On-Screen Debug Text Toggle (L3 & Triangle)
                WriteVar(fileStream, new [] { 0x56F1A8, 0x56F157 }, new byte[] { 0x90, 0x90 });      // Allow Aim Sensitivity To Go Over 1.00 And Under 0.00
                WriteVar(fileStream, 0xAF2A85, new byte[] { 0xBF, 0xB0, 0x00, 0x00, 0x00, 0xEB, 0x2A }); // Skip Some Broken Material Debug Stuff
                WriteVar(fileStream, 0xAF2CD2, new byte[] { 0xEB, 0x79 });                               // Skip Broken Shader Variables Menu
                WriteVar(fileStream, 0xAF255E, new byte[] { 0xEB, 0x29 });                               // Force Material Debug Text To Out Of Index To Aprivate void Crashing (What Did They Change? Wish I Knew Enough To Find Out)
                WriteVar(fileStream, 0xAF25E6, new byte[] { 0xEB, 0x57 });                               // More Of The Above
                WriteVar(fileStream, 0x280E42, new byte[] { 0xE9, 0x79, 0x00, 0x00, 0x00 });             // Skip The Broken First Half Of The Gestures Submenu
                WriteVar(fileStream, 0x280FA5, new byte[] { 0xEB, 0x42 });                               // Skip Gestures Menu .cfg Check And A Pop
                WriteVar(fileStream, 0x51CE08, new byte[] { 0xe8, 0xf3, 0x4a, 0x51, 0x00, 0x48, 0x8d, 0x15, 0x6c, 0xc3, 0x0d, 0x01, 0x48, 0x8d, 0x35, 0x4a, 0xbc, 0xbd, 0x00, 0x49, 0x8b, 0xff, 0xe8, 0xcd, 0xc4, 0x32, 0x00, 0xbf, 0xa0, 0x00, 0x00, 0x00, 0xe8, 0xe3, 0x81, 0x76, 0x00, 0x48, 0x89, 0xc3, 0x48, 0x8d, 0x35, 0x5d, 0xf4, 0xbc, 0x00, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0x4c, 0x89, 0xfa, 0x48, 0x89, 0xdf, 0xe8, 0x79, 0x3f, 0x51, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xe8, 0x6e, 0x4e, 0x51, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3 }); // Rewrite Jumps Menu To Call The One Option In There Instead Of Letting It Be Empty
                WriteVar(fileStream, 0x4060DE, new byte[] { 0xE9, 0xA6, 0x02, 0x00, 0x00 });             // "Fix" Skins Menu
                WriteVar(fileStream, 0x7371F, new byte[] { 0xed, 0x4e, 0xfd, 0xff });                    // Call Bonuses Menu In Quick Menu. Might As Well

                // Call Custom Server Menu, Jump Like A Rabbit To Call It Last lol
                WriteVar(fileStream, 0x405405, new byte[] { 0x89, 0x3d, 0xbd, 0xbe, 0x1d, 0x01, 0x4c, 0x8b, 0x25, 0xb6, 0xbe, 0x1d, 0x01, 0xeb, 0x11, 0x48, 0x8b, 0x3d, 0xad, 0xbe, 0x1d, 0x01, 0xe8, 0x3D, 0x26, 0x05, 0x01, 0xe9, 0x37, 0x0b, 0x00, 0x00 });
                // Another Jump, And Moved Return Instructions To Fit It
                WriteVar(fileStream, 0x405F57, new byte[] { 0xe9, 0xb8, 0xf4, 0xff, 0xff, 0x48, 0x81, 0xc4, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3 });




                foreach (int addr in FunctionsToSkip)
                    WriteVar(fileStream, addr, new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });
                foreach (int addr in Returns)
                    WriteVar(fileStream, addr, 0xC3);

                return true;
            }
            catch (Exception dang)
            {
                Dev?.Print($"T1R11X_RestoredMenu(): Unexpected error applying patches.");
                Dev.PrintError(dang);
                return false;
            }
        }


        private bool _T2107_CustomMenu_OLD()
        {
            var CustomFunctions = new List<byte[]>();
            var Addresses = new []
            {
                0x0033337c, // CustomMenuRedirect (Mem: 0072f37c)
                0x00336afc, // Call MenuMenu And Other Misc. Submenus (Mem: 00732afc)
                0x0046819d, // IkMenuPush (Mem: 0086419d)
                0x00468cff, // IkMenuPop (Mem: 00864cff)
                0x023b9c41, //  (Mem: 027b5c41)
                0x023ba54b, //  (Mem: 027b654b)
                0x024477a0, // CustomMenuRedirect (Mem: 028437a0)
                0x024477af, // DMenuPtrFuncSH(): Preserving 10 & 11 Because The Func At 1F46CB0 Fucks With 'Em (Mem: 028437af)
                0x024477e3, // AppendDMenuItem (Mem: 028437e3)
                0x02447857, // GetSub(): Returns Custom Item Info String Ptr (Mem: 02843857)
                0x0244787d, // subCreate (Mem: 0284387d)
                0x0244799a, // fItemCreate (Mem: 0284399a)
                0x02447afc, // iCreate (Mem: 02843afc)
                0x02447c10, // lineCreate (Mem: 02843c10)
                0x02447cc6, // iItemCreate (Mem: 02843cc6)
                0x02447e37, // ProgPauseFunc (Mem: 02843e37)
                0x02447e59, // ResetDMenuSettings (Mem: 02843e59)
                0x02447ede, // ReapplyBootSettings (Mem: 02843ede)
                0x02447eec, // CreateMenuTestingMenu (Mem: 02843eec)
                0x02447f32, // CreateIkDebugMenu (Mem: 02843f32)
                0x02447f7b, // CMenuMenu (Mem: 02843f7b)
                0x02448190, // CCustomMenu (Mem: 02844190)
            };

            // 0x0033337c CustomMenuRedirect
            CustomFunctions.Add(new byte[] { 0xE8, 0x1F, 0x44, 0x11, 0x02 });
            // 0x00336afc Call MenuMenu And Other Misc. Submenus
            CustomFunctions.Add(new byte[] { 0x49, 0x8B, 0xFD, 0xE8, 0x77, 0x14, 0x11, 0x02, 0x49, 0x8B, 0xFD, 0xE8, 0xE0, 0x13, 0x11, 0x02, 0x49, 0x8B, 0xFD, 0xE8, 0x1E, 0x14, 0x11, 0x02, 0xEB, 0x63 });
            // 0x0046819d IkMenuPush
            CustomFunctions.Add(new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });
            // 0x00468cff IkMenuPop
            CustomFunctions.Add(new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 });
            // 0x023b9c41 
            CustomFunctions.Add(new byte[] { 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x20, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x00, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x2E, 0x2E, 0x2E, 0x00, 0x50, 0x6C, 0x61, 0x63, 0x65, 0x68, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0xFF, 0x54, 0x4D, 0x50, 0x20, 0x53, 0x74, 0x72, 0x00, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6C, 0x69, 0x74, 0x79, 0x00, 0xFF, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x20, 0x43, 0x75, 0x6C, 0x6C, 0x69, 0x6E, 0x67, 0x20, 0x4F, 0x66, 0x20, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x20, 0x47, 0x65, 0x6F, 0x6D, 0x65, 0x74, 0x72, 0x79, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x2E, 0x00, 0xFF, 0x55, 0x6E, 0x63, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x20, 0x47, 0x61, 0x6D, 0x65, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x73, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x2E, 0x2E, 0x2E, 0x00, 0x50, 0x72, 0x6F, 0x67, 0x20, 0x50, 0x61, 0x75, 0x73, 0x65, 0x20, 0x44, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x73, 0x00, 0x50, 0x72, 0x6F, 0x67, 0x20, 0x50, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6F, 0x6E, 0x20, 0x45, 0x78, 0x69, 0x74, 0x00, 0xFF, 0x4F, 0x6E, 0x6C, 0x79, 0x20, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x43, 0x6C, 0x6F, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x57, 0x69, 0x74, 0x68, 0x6F, 0x75, 0x74, 0x20, 0x4C, 0x33, 0x20, 0x43, 0x6F, 0x6D, 0x62, 0x6F, 0x00, 0x53, 0x77, 0x61, 0x70, 0x20, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x26, 0x20, 0x43, 0x69, 0x72, 0x63, 0x6C, 0x65, 0x00, 0x41, 0x6C, 0x69, 0x67, 0x6E, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x73, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x00, 0x20, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x20, 0x4D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x41, 0x6C, 0x70, 0x68, 0x61, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x53, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x53, 0x68, 0x6F, 0x77, 0x20, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x49, 0x6E, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6F, 0x72, 0x00, 0x55, 0x73, 0x65, 0x20, 0x44, 0x50, 0x41, 0x44, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x53, 0x74, 0x65, 0x70, 0x00, 0x55, 0x73, 0x65, 0x20, 0x4C, 0x32, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x53, 0x74, 0x65, 0x70, 0x00, 0x53, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x78, 0x74, 0x00, 0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x52, 0x65, 0x2D, 0x41, 0x70, 0x70, 0x6C, 0x79, 0x20, 0x42, 0x6F, 0x6F, 0x74, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x00, 0xFF, 0x55, 0x73, 0x65, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x49, 0x66, 0x20, 0x41, 0x6E, 0x79, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x20, 0x41, 0x72, 0x65, 0x6E, 0x27, 0x74, 0x20, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x65, 0x64, 0x20, 0x57, 0x68, 0x65, 0x6E, 0x20, 0x54, 0x68, 0x65, 0x20, 0x47, 0x61, 0x6D, 0x65, 0x20, 0x42, 0x6F, 0x6F, 0x74, 0x73, 0x6E, 0x2D, 0x53, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x46, 0x69, 0x65, 0x6C, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x56, 0x69, 0x65, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x64, 0x6A, 0x75, 0x73, 0x74, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x20, 0x43, 0x61, 0x6D, 0x65, 0x72, 0x61, 0x20, 0x46, 0x4F, 0x56, 0x00, 0xFF, 0x44, 0x6F, 0x65, 0x73, 0x20, 0x4E, 0x6F, 0x74, 0x20, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x41, 0x69, 0x6D, 0x2D, 0x44, 0x6F, 0x77, 0x6E, 0x2D, 0x53, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x46, 0x69, 0x65, 0x6C, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x56, 0x69, 0x65, 0x77, 0x00, 0x49, 0x6B, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x00, 0x49, 0x6B, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2E, 0x2E, 0x2E, 0x00, 0xFF, 0x55, 0x6E, 0x63, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x73, 0x20, 0x2D, 0x20, 0x4E, 0x46, 0x00, 0x20, 0x20, 0x43, 0x61, 0x6D, 0x65, 0x72, 0x61, 0x20, 0x41, 0x6C, 0x69, 0x67, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0xFF, 0x41, 0x64, 0x6A, 0x75, 0x73, 0x74, 0x20, 0x58, 0x2D, 0x41, 0x78, 0x69, 0x73, 0x20, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x69, 0x6E, 0x67, 0x00 });
            // 0x023ba54b 
            CustomFunctions.Add(new byte[] { 0x25, 0x2E, 0x32, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0xCD, 0xCC, 0x4C, 0x3D, 0x00, 0x00, 0x80, 0x3E, 0x46, 0x0D, 0xA6, 0x3D, 0x00, 0x00, 0xC0, 0x3F, 0xCD, 0xCC, 0x4C, 0x3D, 0x9A, 0x99, 0x19, 0x3E, 0xA6, 0x9B, 0x44, 0x3C, 0x00, 0x00, 0xC8, 0x41, 0xCD, 0xCC, 0xCC, 0x3D, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC0, 0x00, 0x00, 0x20, 0x40, 0xCD, 0xCC, 0xCC, 0x3D, 0x00, 0x00, 0x80, 0x3E });
            // 0x024477a0 CustomMenuRedirect
            CustomFunctions.Add(new byte[] { 0x49, 0x8B, 0xFD, 0xE8, 0xE8, 0x09, 0x00, 0x00, 0xE8, 0xC3, 0x15, 0xD4, 0xFF, 0xC3 });
            // 0x024477af DMenuPtrFuncSH(): Preserving 10 & 11 Because The Func At 1F46CB0 Fucks With 'Em
            CustomFunctions.Add(new byte[] { 0x53, 0x41, 0x50, 0x41, 0x52, 0x41, 0x53, 0x41, 0x54, 0x4C, 0x8D, 0x25, 0x99, 0x0F, 0x59, 0x00, 0xBE, 0x10, 0x00, 0x00, 0x00, 0x89, 0xFF, 0x31, 0xDB, 0x31, 0xC9, 0x4C, 0x89, 0xE2, 0x4D, 0x89, 0xE0, 0xE8, 0x4B, 0x97, 0x2C, 0xFF, 0x48, 0x89, 0xC0, 0x41, 0x5C, 0x41, 0x5B, 0x41, 0x5A, 0x41, 0x58, 0x5B, 0xC3 });
            // 0x024477e3 AppendDMenuItem
            CustomFunctions.Add(new byte[] { 0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xFF, 0x48, 0x89, 0xD3, 0x31, 0xC0, 0x4D, 0x8D, 0xB7, 0xB0, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD6, 0x48, 0x89, 0xC1, 0x48, 0x8B, 0x02, 0x48, 0x85, 0xC0, 0x48, 0x8D, 0x50, 0x40, 0x75, 0xF1, 0x48, 0x85, 0xC9, 0x48, 0x8D, 0x41, 0x40, 0x49, 0x0F, 0x44, 0xC6, 0x48, 0x89, 0x18, 0x48, 0xC7, 0x43, 0x40, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x89, 0x7B, 0x38, 0x41, 0xFF, 0x87, 0xA0, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x87, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x5B, 0x41, 0x5E, 0x41, 0x5F, 0xC3 });
            // 0x02447857 GetSub(): Returns Custom Item Info String Ptr
            CustomFunctions.Add(new byte[] { 0x48, 0x8D, 0x3E, 0xE8, 0xA1, 0x63, 0x29, 0x00, 0x48, 0x01, 0xC7, 0x80, 0x7F, 0x01, 0xFF, 0x75, 0x05, 0x48, 0x8D, 0x47, 0x02, 0xC3, 0x48, 0x31, 0xC0, 0xC3 });
            // 0x0244787d subCreate
            CustomFunctions.Add(new byte[] { 0x41, 0x52, 0x41, 0x53, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xCD, 0x49, 0x89, 0xFF, 0x89, 0xD7, 0xE8, 0x15, 0xFF, 0xFF, 0xFF, 0x48, 0x89, 0xC3, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0x18, 0xED, 0x3A, 0xFF, 0x4D, 0x85, 0xFF, 0x75, 0x51, 0x48, 0x8D, 0x05, 0xB4, 0x53, 0xAD, 0x00, 0x48, 0x89, 0x03, 0xC5, 0xF9, 0xEF, 0xC0, 0xC5, 0xFA, 0x7F, 0x83, 0xD4, 0x00, 0x00, 0x00, 0xC5, 0xFA, 0x7F, 0x83, 0xC8, 0x00, 0x00, 0x00, 0xC5, 0xFA, 0x7F, 0x83, 0xB0, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x83, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x83, 0xA8, 0x00, 0x00, 0x00, 0x01, 0xC6, 0x83, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xD8, 0xE9, 0x79, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x5B, 0x52, 0xAD, 0x00, 0x48, 0x89, 0x03, 0xC7, 0x83, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x43, 0x60, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8D, 0x36, 0xE8, 0x35, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x90, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x94, 0x23, 0x80, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xBB, 0xB0, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xFF, 0x74, 0x0B, 0x49, 0x89, 0x5F, 0x38, 0x41, 0xFF, 0x87, 0xE0, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFD, 0x48, 0x89, 0xDA, 0xE8, 0x6F, 0xFE, 0xFF, 0xFF, 0x48, 0x31, 0xC0, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x5B, 0x41, 0x5A, 0xC3 });
            // 0x0244799a fItemCreate
            CustomFunctions.Add(new byte[] { 0x55, 0x48, 0x89, 0xE5, 0x41, 0x50, 0x41, 0x51, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x48, 0x83, 0xEC, 0x58, 0x49, 0x89, 0xFF, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xCD, 0x89, 0xDF, 0x48, 0x89, 0xD3, 0x4C, 0x89, 0x45, 0x50, 0x4C, 0x89, 0x4D, 0x58, 0xE8, 0xE5, 0xFD, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0xE8, 0xEB, 0x3A, 0xFF, 0x48, 0x8D, 0x05, 0x69, 0x4E, 0xAD, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x85, 0xDB, 0x75, 0x07, 0x48, 0x8D, 0x1D, 0x91, 0xDD, 0x3B, 0xFF, 0x49, 0x8D, 0x36, 0xE8, 0x60, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x08, 0x49, 0x89, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x9C, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x85, 0x50, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x6C, 0x24, 0x60, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x89, 0x8C, 0x24, 0xF0, 0x00, 0x00, 0x00, 0x4D, 0x31, 0xC9, 0x4D, 0x89, 0x8C, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x8C, 0x24, 0x00, 0x01, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x08, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x41, 0xC6, 0x84, 0x24, 0xA9, 0x00, 0x00, 0x00, 0x06, 0x4C, 0x8B, 0x4C, 0x25, 0x58, 0x4D, 0x8B, 0x01, 0x4D, 0x89, 0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x41, 0x08, 0x4D, 0x89, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0x07, 0xFD, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x58, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x59, 0x41, 0x58, 0x5D, 0xC3 });
            // 0x02447afc iCreate
            CustomFunctions.Add(new byte[] { 0x55, 0x48, 0x89, 0xE5, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x48, 0x83, 0xEC, 0x48, 0x49, 0x89, 0xFF, 0x49, 0x89, 0xF6, 0x89, 0xDF, 0x49, 0x89, 0xCD, 0x48, 0x89, 0xD3, 0xE8, 0x8F, 0xFC, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0x92, 0xEA, 0x3A, 0xFF, 0x4D, 0x85, 0xED, 0x75, 0x09, 0x48, 0x8D, 0x05, 0x16, 0x4E, 0xAD, 0x00, 0xEB, 0x07, 0x48, 0x8D, 0x05, 0xCD, 0x46, 0xAD, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8D, 0x36, 0xE8, 0x08, 0xFD, 0xFF, 0xFF, 0x48, 0x8D, 0x08, 0x49, 0x89, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x85, 0xDB, 0x75, 0x07, 0x48, 0x8D, 0x1D, 0xFA, 0xD2, 0x3B, 0xFF, 0x49, 0x89, 0x9C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xED, 0x75, 0x3A, 0x49, 0xC7, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x41, 0xC7, 0x84, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x60, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x2F, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x6C, 0x24, 0x60, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0xF3, 0xFB, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x48, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x5D, 0xC3 });
            // 0x02447c10 lineCreate
            CustomFunctions.Add(new byte[] { 0x41, 0x57, 0x41, 0x54, 0x49, 0x89, 0xFF, 0x89, 0xDF, 0xE8, 0x91, 0xFB, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0xBA, 0xC8, 0xC8, 0xC8, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x48, 0x8D, 0x0D, 0xC6, 0x42, 0xAD, 0x00, 0x48, 0xC7, 0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC5, 0xF8, 0x57, 0xC0, 0xC5, 0xFC, 0x11, 0x40, 0x30, 0x66, 0xC7, 0x40, 0x50, 0x00, 0x00, 0xC5, 0xF8, 0x57, 0xC0, 0xC5, 0xF8, 0x11, 0x40, 0x58, 0x49, 0x89, 0x54, 0x24, 0x68, 0x41, 0xC7, 0x44, 0x24, 0x70, 0xB0, 0xFF, 0xB0, 0xFF, 0x41, 0xC6, 0x44, 0x24, 0x74, 0x00, 0x66, 0x41, 0xC7, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0xC1, 0x78, 0x11, 0x44, 0x24, 0x78, 0x41, 0xC6, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x0C, 0x24, 0x66, 0x66, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0x23, 0xFB, 0xFF, 0xFF, 0x41, 0x5C, 0x41, 0x5F, 0xC3 });
            // 0x02447cc6 iItemCreate
            CustomFunctions.Add(new byte[] { 0x55, 0x48, 0x89, 0xE5, 0x41, 0x50, 0x41, 0x51, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x48, 0x83, 0xEC, 0x58, 0x49, 0x89, 0xFF, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xCD, 0x89, 0xDF, 0x48, 0x89, 0xD3, 0x4C, 0x89, 0x45, 0x50, 0x4C, 0x89, 0x4D, 0x58, 0xE8, 0xB9, 0xFA, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0xBC, 0xE8, 0x3A, 0xFF, 0x49, 0x8D, 0x36, 0xE8, 0x4B, 0xFB, 0xFF, 0xFF, 0x48, 0x8D, 0x08, 0x48, 0x8D, 0x05, 0x1A, 0x49, 0xAD, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x85, 0xDB, 0x75, 0x07, 0x48, 0x8D, 0x1D, 0x8A, 0xD2, 0x3B, 0xFF, 0x49, 0x89, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x9C, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x85, 0x50, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x6C, 0x24, 0x60, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x89, 0x8C, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4D, 0x31, 0xC9, 0x4D, 0x89, 0x8C, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x8C, 0x24, 0x00, 0x01, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x08, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x41, 0xC6, 0x84, 0x24, 0xA9, 0x00, 0x00, 0x00, 0x06, 0x4C, 0x8B, 0x4C, 0x25, 0x58, 0x49, 0x8D, 0x9C, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x01, 0x44, 0x89, 0x03, 0x48, 0x83, 0xC3, 0x08, 0x49, 0x83, 0xC1, 0x04, 0x48, 0x39, 0x83, 0x10, 0xFF, 0xFF, 0xFF, 0x75, 0xE9, 0x49, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0xD3, 0xF9, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x58, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x59, 0x41, 0x58, 0x5D, 0xC3 });
            // 0x02447e37 ProgPauseFunc
            CustomFunctions.Add(new byte[] { 0x8A, 0x05, 0x7C, 0x29, 0xE0, 0x00, 0x83, 0xFE, 0x05, 0x75, 0x10, 0x34, 0x01, 0x88, 0x05, 0x6F, 0x29, 0xE0, 0x00, 0x80, 0x35, 0xB8, 0x29, 0xE0, 0x00, 0x01, 0xC3, 0x83, 0xFE, 0x08, 0x74, 0xF3, 0xC3 });
            // 0x02447e59 ResetDMenuSettings
            CustomFunctions.Add(new byte[] { 0x83, 0xFE, 0x05, 0x75, 0x4E, 0x80, 0x3D, 0x54, 0x29, 0xE0, 0x00, 0x01, 0x74, 0x05, 0xE8, 0xCB, 0xFF, 0xFF, 0xFF, 0xC6, 0x05, 0x47, 0x29, 0xE0, 0x00, 0x01, 0xC6, 0x05, 0x41, 0x29, 0xE0, 0x00, 0x01, 0xC6, 0x05, 0x3C, 0x29, 0xE0, 0x00, 0x00, 0xC6, 0x05, 0x30, 0x29, 0xE0, 0x00, 0x00, 0xC6, 0x05, 0x2F, 0x29, 0xE0, 0x00, 0x00, 0xC6, 0x05, 0x2A, 0x29, 0xE0, 0x00, 0x0A, 0xC7, 0x05, 0x24, 0x29, 0xE0, 0x00, 0x9A, 0x99, 0x59, 0x3F, 0xC7, 0x05, 0x1E, 0x29, 0xE0, 0x00, 0x9A, 0x99, 0x19, 0x3F, 0xB0, 0x01, 0xC3 });
            // 0x02447ede ReapplyBootSettings
            CustomFunctions.Add(new byte[] { 0x83, 0xFE, 0x05, 0x75, 0x07, 0xE8, 0x4D, 0x34, 0xBC, 0xFD, 0xB0, 0x01, 0xC3 });
            // 0x02447eec CreateMenuTestingMenu
            CustomFunctions.Add(new byte[] { 0x41, 0x56, 0x41, 0x57, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xEB, 0x1D, 0xF7, 0xFF, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0x73, 0xF9, 0xFF, 0xFF, 0x49, 0x89, 0xC6, 0x48, 0x89, 0xC7, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x9A, 0x1D, 0xF7, 0xFF, 0x49, 0x8B, 0xCF, 0xE8, 0x59, 0xF9, 0xFF, 0xFF, 0x49, 0x8B, 0xF6, 0xE8, 0x64, 0x06, 0xFC, 0xFE, 0x41, 0x5F, 0x41, 0x5E, 0xC3 });
            // 0x02447f32 CreateIkDebugMenu
            CustomFunctions.Add(new byte[] { 0x41, 0x56, 0x41, 0x57, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xAC, 0x1F, 0xF7, 0xFF, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0x2D, 0xF9, 0xFF, 0xFF, 0x49, 0x89, 0xC6, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x9B, 0x1F, 0xF7, 0xFF, 0x48, 0x89, 0xC7, 0x49, 0x8B, 0xCF, 0xE8, 0x13, 0xF9, 0xFF, 0xFF, 0x49, 0x8B, 0xF6, 0x49, 0x8B, 0xFF, 0xE8, 0x7B, 0xF5, 0x01, 0xFE, 0x41, 0x5F, 0x41, 0x5E, 0xC3 });
            // 0x02447f7b CMenuMenu
            CustomFunctions.Add(new byte[] { 0x53, 0x41, 0x50, 0x41, 0x51, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x60, 0x1D, 0xF7, 0xFF, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0xDD, 0xF8, 0xFF, 0xFF, 0x49, 0x89, 0xC6, 0x48, 0x89, 0xC7, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x48, 0x1D, 0xF7, 0xFF, 0x49, 0x8B, 0xCF, 0xE8, 0xC3, 0xF8, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x3C, 0x1D, 0xF7, 0xFF, 0x48, 0x8D, 0x15, 0x6A, 0xFE, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0x4C, 0x8D, 0x2D, 0xE2, 0x27, 0xE0, 0x00, 0x49, 0x8B, 0xCD, 0xE8, 0x1D, 0xFB, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x34, 0x1D, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x01, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0x04, 0xFB, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xA1, 0x1D, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x02, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0xEB, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x3C, 0x1D, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x04, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0xD2, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xAD, 0x1D, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0xB9, 0xFA, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0xBB, 0xA8, 0x00, 0x00, 0x00, 0xE8, 0xC0, 0xFB, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x0D, 0x1D, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x05, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0x8E, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x06, 0x1D, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x07, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0x47, 0xA6, 0x56, 0x00, 0x4C, 0x8D, 0x0D, 0xF0, 0x24, 0xF7, 0xFF, 0xBB, 0x68, 0x01, 0x00, 0x00, 0xE8, 0x2C, 0xFC, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xE9, 0x1C, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x0B, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0x96, 0x24, 0xF7, 0xFF, 0x4C, 0x8D, 0x0D, 0x94, 0x24, 0xF7, 0xFF, 0xBB, 0x48, 0x01, 0x00, 0x00, 0xE8, 0xD4, 0xF8, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xC8, 0x1C, 0xF7, 0xFF, 0x49, 0x8D, 0x8D, 0x0F, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0x4D, 0x8D, 0x89, 0x10, 0x00, 0x00, 0x00, 0xE8, 0xB4, 0xF8, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0xBB, 0xA8, 0x00, 0x00, 0x00, 0xE8, 0x1D, 0xFB, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xF0, 0x1C, 0xF7, 0xFF, 0x48, 0x8D, 0x15, 0x53, 0xFD, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xC9, 0xE8, 0xEB, 0xF9, 0xFF, 0xFF, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x59, 0x41, 0x58, 0x5B, 0xC3 });
            // 0x02448190 CCustomMenu
            CustomFunctions.Add(new byte[] { 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x9A, 0x1A, 0xF7, 0xFF, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0xCB, 0xF6, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x94, 0x1A, 0xF7, 0xFF, 0x48, 0x89, 0xC7, 0x49, 0x8B, 0xCF, 0xE8, 0xB1, 0xF6, 0xFF, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xF5, 0x92, 0x49, 0x00, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0x9A, 0xF6, 0xFF, 0xFF, 0x49, 0x89, 0xC5, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xDB, 0x92, 0x49, 0x00, 0x48, 0x89, 0xC7, 0x49, 0x8B, 0xCC, 0xE8, 0x80, 0xF6, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x72, 0x1A, 0xF7, 0xFF, 0x48, 0x8D, 0x0D, 0x1C, 0x1E, 0xBD, 0x00, 0x49, 0x8B, 0xFD, 0x48, 0x31, 0xD2, 0xE8, 0xE1, 0xF8, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x89, 0x1C, 0xF7, 0xFF, 0x48, 0x8D, 0x0D, 0xD7, 0x57, 0xBE, 0x00, 0x49, 0x8B, 0xFD, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0x15, 0x23, 0xF7, 0xFF, 0x4C, 0x8D, 0x0D, 0x33, 0x23, 0xF7, 0xFF, 0xBB, 0x48, 0x01, 0x00, 0x00, 0xE8, 0x53, 0xF7, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xCD, 0x1C, 0xF7, 0xFF, 0x48, 0x8D, 0x0D, 0xA7, 0x57, 0xBE, 0x00, 0x49, 0x8B, 0xFD, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0xE9, 0x22, 0xF7, 0xFF, 0x4C, 0x8D, 0x0D, 0x27, 0x23, 0xF7, 0xFF, 0xBB, 0x48, 0x01, 0x00, 0x00, 0xE8, 0x27, 0xF7, 0xFF, 0xFF, 0x80, 0x3D, 0xB6, 0x30, 0xBC, 0xFD, 0xE8, 0x75, 0x27, 0x80, 0x3D, 0x5B, 0xFC, 0xFF, 0xFF, 0x83, 0x75, 0x1E, 0xBB, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x72, 0x1B, 0xF7, 0xFF, 0x48, 0x8D, 0x15, 0x46, 0xFC, 0xFF, 0xFF, 0x49, 0x8B, 0xFC, 0x48, 0x31, 0xC9, 0xE8, 0x59, 0xF8, 0xFF, 0xFF, 0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0x41, 0x5F, 0xC3 });



            // Check for errors in the saved patch data
            if (Addresses.Length != CustomFunctions.Count)
            {
                Dev?.Print($"ERROR: Mismatch in sizes of address array vs custom functions array. ({Addresses.Length} != {CustomFunctions.Count})");

                UpdateLabel("Unable to apply debug patches.");
                return false;
            }

            
            // Write Custom Functions To .elf
            for(var i = 0; i < CustomFunctions.Count; WriteVar(fileStream, Addresses[i], CustomFunctions[i++]));
                

            Dev?.Print($"T2107_CustomMenu(): Wrote {Addresses.Length} Patches To {fileStream.Name}.");
            return true;
        }

        

        private bool T2107_CustomMenu()
        {
            try {
                var Addresses = new[]
                {
                    0x1f2389,
                    0x33337d,
                    0x2446e2a,
                    0x2446e2e,
                    0x244702a,
                    0x2447042,
                    0x244705b,
                    0x24472f7,
                    0x24472ff,
                    0x2447301,
                    0x2447303,
                    0x2447318,
                    0x2447390,
                    0x24473db,
                    0x2447735,
                    0x2447762,
                    0x24477a5,
                };



                var Patches = new byte[][]
                {
                    new byte[] {  0x10, 0x54 },
                    new byte[] {  0xef, 0x59, 0xe5, 0x01 },
                    new byte[] {  0x48, 0x89 },
                    new byte[] {  0xc5 },
                    new byte[] {  0x00 },
                    new byte[] {  0x15, 0x00, 0x00, 0x00 },
                    new byte[] {  0x0a, 0x3d, 0x3e, 0x20, 0x5b, 0x25, 0x6c, 0x6c, 0x58, 0x5d, 0x0a, 0x00 },
                    new byte[] {  0x55, 0x48, 0x89, 0xe5, 0x53, 0x41, 0x54 },
                    new byte[] {  0x55 },
                    new byte[] {  0x56 },
                    new byte[] {  0x57, 0x49, 0x89, 0xfd, 0x41, 0x55 },
                    new byte[] {  0xf3 },
                    new byte[] {  0x49, 0x89, 0x5f, 0x20, 0x48, 0xbb, 0xf2, 0x87, 0x61, 0x8b, 0x72, 0x3a, 0xe3, 0x83, 0x49, 0x89, 0x5f, 0x18, 0x48, 0x31, 0xdb, 0xe8, 0x7a, 0x03, 0x00, 0x00, 0x49, 0xff, 0xcc, 0x41, 0x5d, 0x41, 0x80, 0xfd, 0x08, 0x74, 0x2a, 0x48, 0xbf, 0xc6, 0xa5, 0xc9, 0x69, 0xd1, 0xee, 0x3b, 0xf0, 0xe8, 0x60, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x12, 0x13, 0x6c, 0x54, 0xc3, 0x65, 0x53, 0x91, 0x48, 0x39, 0xc1, 0x75, 0x0c, 0x48, 0xbb, 0x65, 0x79, 0x80, 0x8e, 0x60, 0x4d },
                    new byte[] {  0x9e, 0xe7, 0xeb, 0x0a, 0x48, 0xbb, 0xad, 0xea, 0x4e, 0x4c, 0xbf, 0x98, 0x78, 0xbe, 0x49, 0x89, 0x1f, 0x48, 0xbb, 0x14, 0xe9, 0x16, 0x78, 0xd6, 0x29, 0x0d, 0x44, 0x49, 0x89, 0x5f, 0x08, 0x48, 0xbf, 0xf2, 0x59, 0x4c, 0x5f, 0x0d, 0xeb, 0x77, 0x42, 0x48, 0x31, 0xdb, 0xe8, 0x20, 0x03, 0x00, 0x00, 0x49, 0x8b, 0xff, 0x48, 0x31, 0xf6, 0xe8, 0x61, 0x76, 0x29, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5b, 0x5d, 0xc3, 0x5b, 0x5d, 0xc3 },
                    new byte[] {  0x27 },
                    new byte[] {  0x23, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x0a, 0x00, 0x00, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x0a, 0x00, 0x48, 0x89, 0xdf, 0xe8, 0xea, 0x09, 0x00 },
                    new byte[] {  0x4c, 0x8b, 0x35, 0x4c, 0x0f, 0xe0, 0x00, 0xc3 }
                };



                if (Patches.Length != Addresses.Length)
                {
                    Console.WriteLine("ERROR: Mismatch in array lengths. ({Patches.Length} != {Addresses.Length}");
                }


                for (var i = 0; i < Patches.Length; i++)
                {
                    WriteVar(fileStream, Addresses[i], Patches[i]);
                }

                return true;
            }
            catch (Exception dang)
            {
                Dev?.PrintError(dang);
                UpdateLabel("Unhandled error applying patch. (file likely moved/deleted by user)");
                return false;
            }
        }

        // TODO:
        // Convert Byte Arrays To Resource Files Once Finalized So The IDE Doesn't Shit The Bed
        private void T2109_CustomMenu() // 1.08 as well, same offsets
        {
            //===========================\\
            //--|   Custom Functions  |--\\
            //===========================\\
            var CustomFunctions = new byte[21][];
            var Addresses = new []
            {
                0x00774b3c, // Call Custom Menu Redirect (Mem: 00b70b3c)
                0x007782bc, // Add Custom Menus After "Camera..." String (Mem: 00b742bc)
                0x008a992d, // IkMenuPush (Mem: 00ca592d)
                0x008aa48f, // IkMenuPop (Mem: 00ca648f)
                0x02df3b41, // CustomMenuRedirect (Mem: 031efb41)
                0x02df3b51, // DMenuPtrFuncSH(): Preserving 10 & 11 Because The Func At 1F46CB0 Fucks With 'Em (Mem: 031efb51)
                0x02df3b85, // AppendDMenuItem (Mem: 031efb85)
                0x02df3bf2, // GetSub(): Returns Custom Item Info String Ptr (Mem: 031efbf2)
                0x02df3c1f, // CreateMenuTestMenu (Mem: 031efc1f)
                0x02df3c65, // subCreate (Mem: 031efc65)
                0x02df3d7d, // fItemCreate (Mem: 031efd7d)
                0x02df3ee5, // iCreate (Mem: 031efee5)
                0x02df400b, // lineCreate (Mem: 031f000b)
                0x02df40f3, // iItemCreate (Mem: 031f00f3)
                0x02df4293, // ProgPauseFunc (Mem: 031f0293)
                0x02df42b5, // ResetDMenuSettings (Mem: 031f02b5)
                0x02df4347, // CMenuMenu (Mem: 031f0347)
                0x02df450d, // IkDebugMenu (Mem: 031f050d)
                0x02df4556, // CCustomMenu (Mem: 031f0556)
                0x02df47dc, // Single/Int Item Data (Mem: 031f07dc)
                0x02df491d  // Item String Data (Mem: 031f091d)
            };


            // 0x00774b3c Call Custom Menu Redirect
            CustomFunctions[0] = new byte[] { 0x48, 0x8D, 0x15, 0x4D, 0x58, 0x33, 0x02, 0x49, 0x8B, 0xFD, 0xE8, 0xF6, 0xEF, 0x67, 0x02, 0x49, 0x89, 0xC6, 0xBF, 0xC0, 0x00, 0x00, 0x00, 0xE8, 0xF9, 0xEF, 0x67, 0x02, 0xEB, 0x07 };
            // 0x007782bc Add Custom Menus After "Camera..." String
            CustomFunctions[1] = new byte[] { 0x49, 0x8B, 0xFD, 0xE8, 0x83, 0xC0, 0x67, 0x02, 0x49, 0x8B, 0xFD, 0xE8, 0x53, 0xB9, 0x67, 0x02, 0x49, 0x8B, 0xFD, 0xE8, 0x39, 0xC2, 0x67, 0x02, 0xEB, 0x68 };
            // 0x008a992d IkMenuPush
            CustomFunctions[2] = new byte[] { 0xEB, 0x03, 0x1B, 0x2A, 0x01 };
            // 0x008aa48f IkMenuPop
            CustomFunctions[3] = new byte[] { 0xE9, 0x00, 0x00, 0x00, 0x00 };
            // 0x02df3b41 CustomMenuRedirect
            CustomFunctions[4] = new byte[] { 0x48, 0x89, 0xFF, 0xE8, 0x0D, 0x0A, 0x00, 0x00, 0xE8, 0x12, 0xAD, 0x7B, 0xFF, 0xC3 };
            // 0x02df3b51 DMenuPtrFuncSH(): Preserving 10 & 11 Because The Func At 1F46CB0 Fucks With 'Em
            CustomFunctions[5] = new byte[] { 0x53, 0x41, 0x50, 0x41, 0x52, 0x41, 0x53, 0x41, 0x54, 0x4C, 0x8D, 0x25, 0x2F, 0x68, 0xCB, 0xFF, 0xBE, 0x10, 0x00, 0x00, 0x00, 0x89, 0xFF, 0x31, 0xDB, 0x31, 0xC9, 0x4C, 0x89, 0xE2, 0x4D, 0x89, 0xE0, 0xE8, 0x39, 0x71, 0xD5, 0xFE, 0x48, 0x89, 0xC0, 0x41, 0x5C, 0x41, 0x5B, 0x41, 0x5A, 0x41, 0x58, 0x5B, 0xC3 };
            // 0x02df3b85 AppendDMenuItem
            CustomFunctions[6] = new byte[] { 0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xFF, 0x48, 0x89, 0xD3, 0x31, 0xC0, 0x4D, 0x8D, 0xB7, 0xB0, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD6, 0x48, 0x89, 0xC1, 0x48, 0x8B, 0x02, 0x48, 0x85, 0xC0, 0x48, 0x8D, 0x50, 0x40, 0x75, 0xF1, 0x48, 0x85, 0xC9, 0x48, 0x8D, 0x41, 0x40, 0x49, 0x0F, 0x44, 0xC6, 0x48, 0x89, 0x18, 0x48, 0xC7, 0x43, 0x40, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x89, 0x7B, 0x38, 0x41, 0xFF, 0x87, 0xA0, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x87, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x5B, 0x41, 0x5E, 0x41, 0x5F, 0xC3 };
            // 0x02df3bf2 GetSub(): Returns Custom Item Info String Ptr
            CustomFunctions[7] = new byte[] { 0x48, 0x8D, 0x3E, 0xE8, 0x06, 0xB8, 0x9C, 0xFF, 0x48, 0x01, 0xC7, 0x80, 0x7F, 0x01, 0xFF, 0x75, 0x05, 0x48, 0x8D, 0x47, 0x02, 0xC3, 0x48, 0x31, 0xC0, 0xC3 };
            // 0x02df3c1f CreateMenuTestMenu
            CustomFunctions[8] = new byte[] { 0x41, 0x56, 0x41, 0x57, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x95, 0x0D, 0x00, 0x00, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0x28, 0x00, 0x00, 0x00, 0x49, 0x89, 0xC6, 0x48, 0x89, 0xC7, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x44, 0x0D, 0x00, 0x00, 0x49, 0x8B, 0xCF, 0xE8, 0x0E, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xF6, 0xE8, 0xB1, 0x2E, 0xA5, 0xFE, 0x41, 0x5F, 0x41, 0x5E, 0xC3 };
            // 0x02df3c65 subCreate
            CustomFunctions[9] = new byte[] { 0x41, 0x52, 0x41, 0x53, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xCD, 0x49, 0x89, 0xFF, 0x89, 0xD7, 0xE8, 0xCF, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0xC3, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0xD0, 0xC6, 0xE3, 0xFE, 0x48, 0x8D, 0x05, 0xA1, 0x6B, 0x17, 0x00, 0x48, 0x89, 0x03, 0x4D, 0x85, 0xFF, 0x75, 0x47, 0xC5, 0xF9, 0xEF, 0xC0, 0xC5, 0xFA, 0x7F, 0x83, 0xD4, 0x00, 0x00, 0x00, 0xC5, 0xFA, 0x7F, 0x83, 0xC8, 0x00, 0x00, 0x00, 0xC5, 0xFA, 0x7F, 0x83, 0xB0, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x83, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x83, 0xA8, 0x00, 0x00, 0x00, 0x01, 0xC6, 0x83, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xD8, 0xE9, 0x79, 0x00, 0x00, 0x00, 0xC7, 0x83, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x43, 0x60, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8D, 0x36, 0xE8, 0xF2, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x90, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x94, 0x23, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x1A, 0x6A, 0x17, 0x00, 0x48, 0x89, 0x03, 0x48, 0xC7, 0x83, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xBB, 0xB0, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x83, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xFF, 0x74, 0x0B, 0x49, 0x89, 0x5F, 0x38, 0x41, 0xFF, 0x87, 0xE0, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xFD, 0x48, 0x89, 0xDA, 0xE8, 0x29, 0xFE, 0xFF, 0xFF, 0x48, 0x31, 0xC0, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x5B, 0x41, 0x5A, 0xC3 };
            // 0x02df3d7d fItemCreate
            CustomFunctions[10] = new byte[] { 0x55, 0x48, 0x89, 0xE5, 0x41, 0x50, 0x41, 0x51, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x48, 0x83, 0xEC, 0x58, 0x49, 0x89, 0xFF, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xCD, 0x89, 0xDF, 0x48, 0x89, 0xD3, 0x4C, 0x89, 0x45, 0x50, 0x4C, 0x89, 0x4D, 0x58, 0xE8, 0xA4, 0xFD, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0xA5, 0xC5, 0xE3, 0xFE, 0x48, 0x8D, 0x05, 0x56, 0x66, 0x17, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x85, 0xDB, 0x75, 0x07, 0x48, 0x8D, 0x1D, 0x4E, 0xB7, 0xE4, 0xFE, 0x49, 0x8D, 0x36, 0xE8, 0x18, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x08, 0x49, 0x89, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x9C, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x85, 0x50, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x6C, 0x24, 0x60, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x89, 0x8C, 0x24, 0xF0, 0x00, 0x00, 0x00, 0x4D, 0x31, 0xC9, 0x4D, 0x89, 0x8C, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x8C, 0x24, 0x00, 0x01, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x08, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x41, 0xC6, 0x84, 0x24, 0xA9, 0x00, 0x00, 0x00, 0x06, 0x4C, 0x8B, 0x4C, 0x25, 0x58, 0x4D, 0x8B, 0x01, 0x4D, 0x89, 0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x41, 0x08, 0x4D, 0x89, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0xC6, 0xFC, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x58, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x59, 0x41, 0x58, 0x5D, 0xC3 };
            // 0x02df3ee5 iCreate
            CustomFunctions[11] = new byte[] { 0x55, 0x48, 0x89, 0xE5, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x48, 0x83, 0xEC, 0x48, 0x49, 0x89, 0xFF, 0x49, 0x89, 0xF6, 0x89, 0xDF, 0x49, 0x89, 0xCD, 0x48, 0x89, 0xD3, 0xE8, 0x48, 0xFC, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0x49, 0xC4, 0xE3, 0xFE, 0x4D, 0x85, 0xED, 0x75, 0x09, 0x48, 0x8D, 0x05, 0xFD, 0x65, 0x17, 0x00, 0xEB, 0x07, 0x48, 0x8D, 0x05, 0xB4, 0x5E, 0x17, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8D, 0x36, 0xE8, 0xBA, 0xFC, 0xFF, 0xFF, 0x48, 0x8D, 0x08, 0x49, 0x89, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x85, 0xDB, 0x75, 0x07, 0x48, 0x8D, 0x1D, 0xB1, 0xAC, 0xE4, 0xFE, 0x49, 0x89, 0x9C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xED, 0x75, 0x3A, 0x49, 0xC7, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x41, 0xC7, 0x84, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x60, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x2F, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x6C, 0x24, 0x60, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0xAC, 0xFB, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x48, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x5D, 0xC3 };
            // 0x02df400b lineCreate
            CustomFunctions[12] = new byte[] { 0x41, 0x57, 0x41, 0x54, 0x49, 0x89, 0xFF, 0x89, 0xDF, 0xE8, 0x38, 0xFB, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0xBA, 0xC8, 0xC8, 0xC8, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x48, 0x8D, 0x0D, 0x9B, 0x5A, 0x17, 0x00, 0x48, 0xC7, 0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC5, 0xF8, 0x57, 0xC0, 0xC5, 0xFC, 0x11, 0x40, 0x30, 0x66, 0xC7, 0x40, 0x50, 0x00, 0x00, 0xC5, 0xF8, 0x57, 0xC0, 0xC5, 0xF8, 0x11, 0x40, 0x58, 0x49, 0x89, 0x54, 0x24, 0x68, 0x41, 0xC7, 0x44, 0x24, 0x70, 0xB0, 0xFF, 0xB0, 0xFF, 0x41, 0xC6, 0x44, 0x24, 0x74, 0x00, 0x66, 0x41, 0xC7, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0xC1, 0x78, 0x11, 0x44, 0x24, 0x78, 0x41, 0xC6, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x0C, 0x24, 0x66, 0x66, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0xCA, 0xFA, 0xFF, 0xFF, 0x41, 0x5C, 0x41, 0x5F, 0xC3 };
            // 0x02df40f3 iItemCreate
            CustomFunctions[13] = new byte[] { 0x55, 0x48, 0x89, 0xE5, 0x41, 0x50, 0x41, 0x51, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x53, 0x48, 0x83, 0xEC, 0x58, 0x49, 0x89, 0xFF, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xCD, 0x89, 0xDF, 0x48, 0x89, 0xD3, 0x4C, 0x89, 0x45, 0x50, 0x4C, 0x89, 0x4D, 0x58, 0xE8, 0x2E, 0xFA, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0x48, 0x89, 0xC7, 0x49, 0x8D, 0x36, 0xE8, 0x2F, 0xC2, 0xE3, 0xFE, 0x49, 0x8D, 0x36, 0xE8, 0xB9, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x08, 0x48, 0x8D, 0x05, 0xBD, 0x60, 0x17, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x85, 0xDB, 0x75, 0x07, 0x48, 0x8D, 0x1D, 0xFD, 0xAB, 0xE4, 0xFE, 0x49, 0x89, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x9C, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x85, 0x50, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x6C, 0x24, 0x60, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x89, 0x8C, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4D, 0x31, 0xC9, 0x4D, 0x89, 0x8C, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x4D, 0x89, 0x8C, 0x24, 0x00, 0x01, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x08, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC7, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x84, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x41, 0xC6, 0x84, 0x24, 0xA9, 0x00, 0x00, 0x00, 0x06, 0x4C, 0x8B, 0x4C, 0x25, 0x58, 0x49, 0x8D, 0x9C, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x01, 0x44, 0x89, 0x03, 0x48, 0x83, 0xC3, 0x08, 0x49, 0x83, 0xC1, 0x04, 0x48, 0x39, 0x83, 0x10, 0xFF, 0xFF, 0xFF, 0x75, 0xE9, 0x49, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x49, 0xC7, 0x84, 0x24, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xD4, 0x49, 0x8B, 0xFF, 0xE8, 0x48, 0xF9, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x58, 0x5B, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x59, 0x41, 0x58, 0x5D, 0xC3 };
            // 0x02df4293 ProgPauseFunc
            CustomFunctions[14] = new byte[] { 0x8A, 0x05, 0xA0, 0xA3, 0x46, 0x00, 0x83, 0xFE, 0x05, 0x75, 0x10, 0x34, 0x01, 0x88, 0x05, 0x93, 0xA3, 0x46, 0x00, 0x80, 0x35, 0xDC, 0xA3, 0x46, 0x00, 0x01, 0xC3, 0x83, 0xFE, 0x08, 0x74, 0xF3, 0xC3 };
            // 0x02df42b5 ResetDMenuSettings
            CustomFunctions[15] = new byte[] { 0x83, 0xFE, 0x05, 0x75, 0x4E, 0x80, 0x3D, 0x78, 0xA3, 0x46, 0x00, 0x01, 0x74, 0x05, 0xE8, 0xCB, 0xFF, 0xFF, 0xFF, 0xC6, 0x05, 0x6B, 0xA3, 0x46, 0x00, 0x01, 0xC6, 0x05, 0x65, 0xA3, 0x46, 0x00, 0x01, 0xC6, 0x05, 0x60, 0xA3, 0x46, 0x00, 0x00, 0xC6, 0x05, 0x54, 0xA3, 0x46, 0x00, 0x00, 0xC6, 0x05, 0x53, 0xA3, 0x46, 0x00, 0x00, 0xC6, 0x05, 0x4E, 0xA3, 0x46, 0x00, 0x0A, 0xC7, 0x05, 0x48, 0xA3, 0x46, 0x00, 0x9A, 0x99, 0x59, 0x3F, 0xC7, 0x05, 0x42, 0xA3, 0x46, 0x00, 0x00, 0x00, 0x40, 0x3F, 0xB0, 0x01, 0xC3 };
            // 0x02df4347 CMenuMenu
            CustomFunctions[16] = new byte[] { 0x53, 0x41, 0x50, 0x41, 0x51, 0x41, 0x56, 0x41, 0x57, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x73, 0x06, 0x00, 0x00, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0xFB, 0xF8, 0xFF, 0xFF, 0x49, 0x89, 0xC6, 0x48, 0x89, 0xC7, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x5B, 0x06, 0x00, 0x00, 0x49, 0x8B, 0xCF, 0xE8, 0xE1, 0xF8, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x4F, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x15, 0xFC, 0xFE, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0x48, 0x8D, 0x0D, 0x98, 0xA2, 0x46, 0x00, 0xE8, 0x3F, 0xFB, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x4A, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x86, 0xA2, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0x26, 0xFB, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xBD, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x6E, 0xA2, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0x0D, 0xFB, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x58, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x57, 0xA2, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0xF4, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xC9, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x39, 0xA2, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0xDB, 0xFA, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0xBB, 0xA8, 0x00, 0x00, 0x00, 0xE8, 0xF4, 0xFB, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x29, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x14, 0xA2, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0xE8, 0xB0, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x22, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xFD, 0xA1, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0xA0, 0xF8, 0xCC, 0xFF, 0x4C, 0x8D, 0x0D, 0xB6, 0x03, 0x00, 0x00, 0xBB, 0x68, 0x01, 0x00, 0x00, 0xE8, 0x92, 0xFC, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x05, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xD5, 0xA1, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0x8E, 0x03, 0xCC, 0xFF, 0x4C, 0x8D, 0x0D, 0x5A, 0x03, 0x00, 0x00, 0xBB, 0x48, 0x01, 0x00, 0x00, 0xE8, 0xF0, 0xF8, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0xE4, 0x05, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xAD, 0xA1, 0x46, 0x00, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xD2, 0x4D, 0x8D, 0x89, 0x10, 0x00, 0x00, 0x00, 0xE8, 0xD0, 0xF8, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0xBB, 0xA8, 0x00, 0x00, 0x00, 0xE8, 0x51, 0xFB, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x0D, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x15, 0xE8, 0xFD, 0xFF, 0xFF, 0x49, 0x8B, 0xFE, 0x48, 0x31, 0xC9, 0xE8, 0x0D, 0xFA, 0xFF, 0xFF, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x59, 0x41, 0x58, 0x5B, 0xC3 };
            // 0x02df450d IkDebugMenu
            CustomFunctions[17] = new byte[] { 0x41, 0x56, 0x41, 0x57, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x2A, 0x06, 0x00, 0x00, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0x3A, 0xF7, 0xFF, 0xFF, 0x49, 0x89, 0xC6, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xC7, 0x49, 0x8B, 0xCF, 0xE8, 0x20, 0xF7, 0xFF, 0xFF, 0x49, 0x8B, 0xF6, 0x49, 0x8B, 0xFF, 0xE8, 0x30, 0x47, 0xAB, 0xFD, 0x41, 0x5F, 0x41, 0x5E, 0xC3 };
            // 0x02df4556 CCustomMenu
            CustomFunctions[18] = new byte[] { 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x49, 0x89, 0xFF, 0xBA, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xB1, 0x03, 0x00, 0x00, 0x48, 0x31, 0xFF, 0x48, 0x31, 0xC9, 0xE8, 0xED, 0xF6, 0xFF, 0xFF, 0x49, 0x89, 0xC4, 0xBA, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xAB, 0x03, 0x00, 0x00, 0x48, 0x89, 0xC7, 0x49, 0x8B, 0xCF, 0xE8, 0xD3, 0xF6, 0xFF, 0xFF, 0xBB, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0xBA, 0x03, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x87, 0x98, 0x25, 0x00, 0x49, 0x8B, 0xFC, 0x48, 0x31, 0xD2, 0xE8, 0x35, 0xF9, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x85, 0x03, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xCB, 0xA0, 0x46, 0x00, 0x49, 0x8B, 0xFC, 0x48, 0x31, 0xD2, 0xE8, 0x1C, 0xF9, 0xFF, 0xFF, 0x48, 0x8D, 0x35, 0x34, 0x05, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x29, 0xD2, 0x26, 0x00, 0x49, 0x8B, 0xFC, 0x48, 0x31, 0xD2, 0x4C, 0x8D, 0x05, 0x26, 0x02, 0xCC, 0xFF, 0x4C, 0x8D, 0x0D, 0x12, 0x02, 0x00, 0x00, 0xBB, 0x48, 0x01, 0x00, 0x00, 0xE8, 0x88, 0xF7, 0xFF, 0xFF, 0xBB, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x61, 0x26, 0xC0, 0xFF, 0x48, 0x8D, 0x15, 0x58, 0xAB, 0xA3, 0xFD, 0x49, 0x8B, 0xFC, 0x48, 0x31, 0xC9, 0xE8, 0xD2, 0xF8, 0xFF, 0xFF, 0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0x41, 0x5F, 0xC3 };
            // 0x02df47dc Single/Int Item Data
            CustomFunctions[19] = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0xCD, 0xCC, 0x4C, 0x3D, 0x00, 0x00, 0x80, 0x3E, 0x46, 0x0D, 0xA6, 0x3D, 0x00, 0x00, 0xC0, 0x3F, 0xCD, 0xCC, 0x4C, 0x3D, 0x9A, 0x99, 0x19, 0x3E, 0xA6, 0x9B, 0x44, 0x3C, 0x00, 0x00, 0xC8, 0x41, 0xCD, 0xCC, 0xCC, 0x3D, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00 };
            // 0x02df491d Item String Data
            CustomFunctions[20] = new byte[] { 0x00, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x20, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x00, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x2E, 0x2E, 0x2E, 0x00, 0x50, 0x6C, 0x61, 0x63, 0x65, 0x68, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0xFF, 0x54, 0x4D, 0x50, 0x20, 0x53, 0x74, 0x72, 0x00, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6C, 0x69, 0x74, 0x79, 0x00, 0xFF, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x20, 0x43, 0x75, 0x6C, 0x6C, 0x69, 0x6E, 0x67, 0x20, 0x4F, 0x66, 0x20, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x20, 0x47, 0x65, 0x6F, 0x6D, 0x65, 0x74, 0x72, 0x79, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x2E, 0x00, 0xFF, 0x55, 0x6E, 0x63, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x20, 0x47, 0x61, 0x6D, 0x65, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x73, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x2E, 0x2E, 0x2E, 0x00, 0x50, 0x72, 0x6F, 0x67, 0x20, 0x50, 0x61, 0x75, 0x73, 0x65, 0x20, 0x44, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x73, 0x00, 0x50, 0x72, 0x6F, 0x67, 0x20, 0x50, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6F, 0x6E, 0x20, 0x45, 0x78, 0x69, 0x74, 0x00, 0xFF, 0x4F, 0x6E, 0x6C, 0x79, 0x20, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x43, 0x6C, 0x6F, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x57, 0x69, 0x74, 0x68, 0x6F, 0x75, 0x74, 0x20, 0x4C, 0x33, 0x20, 0x43, 0x6F, 0x6D, 0x62, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x77, 0x61, 0x70, 0x20, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x26, 0x20, 0x43, 0x69, 0x72, 0x63, 0x6C, 0x65, 0x00, 0x41, 0x6C, 0x69, 0x67, 0x6E, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x73, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x00, 0x20, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x20, 0x4D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x41, 0x6C, 0x70, 0x68, 0x61, 0x00, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x53, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x53, 0x68, 0x6F, 0x77, 0x20, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x49, 0x6E, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6F, 0x72, 0x00, 0x55, 0x73, 0x65, 0x20, 0x44, 0x50, 0x41, 0x44, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x53, 0x74, 0x65, 0x70, 0x00, 0x55, 0x73, 0x65, 0x20, 0x4C, 0x32, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x53, 0x74, 0x65, 0x70, 0x00, 0x53, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x54, 0x65, 0x78, 0x74, 0x00, 0x00, 0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x64, 0x6A, 0x75, 0x73, 0x74, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x20, 0x43, 0x61, 0x6D, 0x65, 0x72, 0x61, 0x20, 0x46, 0x4F, 0x56, 0x00, 0xFF, 0x44, 0x6F, 0x65, 0x73, 0x20, 0x4E, 0x6F, 0x74, 0x20, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x41, 0x69, 0x6D, 0x2D, 0x44, 0x6F, 0x77, 0x6E, 0x2D, 0x53, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x46, 0x69, 0x65, 0x6C, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x56, 0x69, 0x65, 0x77, 0x00, 0x49, 0x6B, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x00, 0x49, 0x6B, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2E, 0x2E, 0x2E, 0x00, 0xFF, 0x55, 0x6E, 0x63, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x20, 0x4D, 0x65, 0x6E, 0x75, 0x73, 0x20, 0x2D, 0x20, 0x4E, 0x46, 0x00 };


            // Write Custom Functions To .elf
            for(int i = 0; i < CustomFunctions.Length; i++)
                WriteVar(fileStream, Addresses[i], CustomFunctions[i]);





            //=================================\\
            //--|   Miscellaneous Patches   |--\\
            //=================================\\
            
            // Swap "Disable Debug Rendering" and "Disable FPS" Byte Pointers In L3 + Triangle Toggle
            WriteVar(fileStream, new [] { 0x1C45085, 0x1C45092 }, 0xB8);
            WriteVar(fileStream, 0x1C450A5, 0xaa);

            // Force "Search..." Menu In To DMenu Root
            WriteVar(fileStream, 0x774a46, new byte[] { 0x49, 0x8B, 0xD4 }); // 0x00774a46 R15 -> 12
            WriteVar(fileStream, 0x774a66, new byte[] { 0x49, 0x0F, 0x44, 0xC4 }); // 0x00774a66 R15 -> 12
            WriteVar(fileStream, 0x774a75, new byte[] { 0x4C, 0x89, 0x6B, 0x38 }); // 0x00774a75 R14 -> 13
            WriteVar(fileStream, 0x774A7B, 0x85);   // R14 -> 13
            WriteVar(fileStream, 0x00774a82, 0x85); // R14 -> 13
            WriteVar(fileStream, 0x774a8a, 0xBD);   // R14 -> 13

            // Skip Shite Items (Render Pause & Reload Ingame Shaders)
            WriteVar(fileStream, 0x25beb89, new byte[] { 0xE9, 0xCB, 0x02, 0x00, 0x00 });

            // Adjust DMenu Scaling (.4 -> .75)
            WriteVar(fileStream, 0x7A4ECF, new byte[] { 0, 0, 0x40, 0x3f });
        }
        #endregion


        
        
        //======================================\\
        //--|   Event Handler Declarations   |--\\
        //======================================\\
        #region [Event Handler Declarations]

        /// <summary>
        /// Create a new OpenFileDialogue instance in which to choose an executable to patch.
        /// </summary>
        private void BrowseButton_Click(object sender, EventArgs e)
        {
            using(var fileDialog = new OpenFileDialog {
                Filter = "Unsigned/Decrypted Executable|*.bin;*.elf",
                Title = "Select A .elf/.bin Format Executable. The File Must Be Unsigned / Decrypted (The First 4 Bytes Will Be .elf If It Is)"
            })

            if(fileDialog.ShowDialog() == DialogResult.OK)
            {
                ExecutablePathBox.Set(fileDialog.FileName);
            }
        }


        /// <summary>
        /// Process the edited executable path box text if it points to a valid file
        /// </summary>
        private void ExecutablePathBox_TextChanged(object sender, EventArgs e)
        {
            if (!((TextBox)sender).IsDefault() && File.Exists(((TextBox)sender).Text))
            {
                LoadGameExecutable(((TextBox)sender).Text);
            }
        }

        

        public void DisableDebugBtn_Click(object sender, EventArgs e) => ApplyDebugPatches(0);
        public void EnableDebugBtn_Click(object sender, EventArgs e) => ApplyDebugPatches(1);
        public void RestoredDebugBtn_Click(object sender, EventArgs e) => ApplyDebugPatches(RestoredDebugBtn.Text.Contains(" Custom") ? 3 : 2);
        #endregion
    }
}
